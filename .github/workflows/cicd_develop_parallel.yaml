name: Deploy V2 holoclis to staging[develop-v2]

permissions:
  id-token: write
  contents: read # This is required for actions/checkout@v2

env:
  AWS_REGION: us-west-2
  IAM_ROLE: arn:aws:iam::177635894328:role/Github_role_to_access_ECR
  ECR_REPOSITORY: holo-cli-dev # notice: the same for all cli apps
  #
  IMAGE_TAG: dev-${{ github.sha }}
  #
  CLUSTER_NAME: staging
  #
  AWS_KEY_ID: ${{ secrets.NEWSTAGE_USER_AWS_ACCESS_KEY_ID }}
  AWS_ACCESS_KEY: ${{ secrets.NEWSTAGE_USER_AWS_SECRET_ACCESS_KEY }}
  #
#  STG_HOLOGRAPH_INDEXER_HOST: 'http://devel-holo-api.develop.svc.cluster.local:443'
#  STG_HOLOGRAPH_OPERATOR_HOST: 'http://devel-holo-api.develop.svc.cluster.local:443'
  #
  # set the RPC endpoints config files
  INDEXER_HOLOGRAPH_CONFIG_FILE_DATA: dev-config-file
  OPERATOR_HOLOGRAPH_CONFIG_FILE_DATA: dev-config-file
  #
  HOLOGRAPH_ENVIRONMENT: develop
  BLOCK_PROCESSING_VERSION: 'V2'
  #
  STG_DOMAIN: 'holograph.xyz' # needed only for the health checks
  #
  # SQS User [indexer_processor_sqs_user]
  #
  STG_COMMON_NAMESPACE_V2: 'develop-v2'
  #######################################
  STG_HOLOGRAPH_INDEXER_HELM_CHART_VERSION: 0.1.81
#  INDEXER_RELEASE_NAME_V2: 'indexer-dev-v2' # format -> [release_name]-indexer-[env]
  INDEXER_RELEASE_NAME_V2: 'sdfsdfsd' # format -> [release_name]-indexer-[env] #deleteme
  #
  STG_HOLOGRAPH_OPERATOR_HELM_CHART_VERSION: 0.1.13
#  OPERATOR_RELEASE_NAME_V2: 'operator-dev-v2' # format -> [release_name]-indexer-[env]
  OPERATOR_RELEASE_NAME_V2: 'dfsdfsd' # format -> [release_name]-indexer-[env] #deleteme
  #######################################

on:
  push:
    branches:
      - 'feat/separate-v1-v2-cli-cicd'
      # Excluded branches
      - '!testnet'
      - '!main'
      - '!mainnet'
      - '!master'

jobs:
  # NOTICE: job
  common-stuff:
    name: Setup-common-stuff
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.step1.outputs.value1 }}
      output2: ${{ steps.step1.outputs.value2 }}
    steps:
      - name: Use Githubs federated identity with AWS
        uses: aws-actions/configure-aws-credentials@v4
        id: step1
        with:
          role-to-assume: ${{ env.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          output-credentials: true

  # NOTICE: job
  deploy-indexer:
    name: Deploy-indexer-in-develop
    runs-on: ubuntu-latest
    needs: common-stuff
    env:
      AWS_KEY_ID: ${{ needs.common-stuff.outputs.output1 }}
      AWS_ACCESS_KEY: ${{ needs.common-stuff.outputs.output2 }}

    steps:
      - name: Get secrets from AWS Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2.0.2
        with:
          aws-region: ${{ env.AWS_REGION }}
          secret-ids: |
            DEV_INDEXER_V1
            DEV_INDEXER_V2
            COMMON
          parse-json-secrets: true # to be able to get the json k/v pairs

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout the code
        uses: actions/checkout@v2

      - name: test
        run: |
          ls -la

#  # NOTICE: job
#  deploy-operator:
#    name: Deploy-operator-in-develop
#    runs-on: ubuntu-latest
#    needs: common-stuff
#    steps:
##      - name: Use Githubs federated identity with AWS
##        uses: aws-actions/configure-aws-credentials@v1
##        with:
##          role-to-assume: ${{ env.IAM_ROLE }}
##          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Get secrets from AWS Secrets Manager
#        uses: aws-actions/aws-secretsmanager-get-secrets@v1
#        with:
#          aws-region: ${{ env.AWS_REGION }}
#          secret-ids: |
#            DEV_OPERATOR_V1
#            DEV_OPERATOR_V2
#            COMMON
#          parse-json-secrets: true # to be able to get the json k/v pairs
#
#      - name: Login to ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Checkout the code
#        uses: actions/checkout@v2
#
#      - name: test
#        run: |
#          ls -la
