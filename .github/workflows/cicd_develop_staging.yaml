name: Deploy V1 & V2 holoclis to staging[develop/develop-v2]

permissions:
  id-token: write
  contents: read # This is required for actions/checkout@v2

env:
  AWS_REGION: us-west-2
  IAM_ROLE: arn:aws:iam::177635894328:role/Github_role_to_access_ECR
  ECR_REPOSITORY: holo-cli-dev # notice: the same for all cli apps
  #
  DEV_IMAGE_TAG: dev-${{ github.sha }}
  #
  CLUSTER_NAME: staging
  #
  AWS_KEY_ID: ${{ secrets.NEWSTAGE_USER_AWS_ACCESS_KEY_ID }}
  AWS_ACCESS_KEY: ${{ secrets.NEWSTAGE_USER_AWS_SECRET_ACCESS_KEY }}
  ALB_CERT_ARN: ${{ secrets.PROD_ALB_CERT_ARN_FOR_HOLOGRAPH_XYZ }}
  #
  STG_HOLOGRAPH_INDEXER_OPERATOR_API_KEY: ${{ secrets.HOLO_INDEXER_OPERATOR_API_KEY }}
  STG_HOLOGRAPH_OPERATOR_OPERATOR_API_KEY: ${{ secrets.HOLO_INDEXER_OPERATOR_API_KEY }}
  #
  STG_HOLOGRAPH_INDEXER_HOST: 'http://devel-holo-api.develop.svc.cluster.local:443'
  STG_HOLOGRAPH_OPERATOR_HOST: 'http://devel-holo-api.develop.svc.cluster.local:443'
  #
  STG_HOLOGRAPH_INDEXER_PASSWORD: ${{ secrets.DEV_HOLO_INDEXER_PASSWORD }}
  STG_HOLOGRAPH_OPERATOR_PASSWORD: ${{ secrets.DEV_HOLO_OPERATOR_PASSWORD }}
  #
  # set the RPC endpoints config files
  INDEXER_HOLOGRAPH_CONFIG_FILE_DATA: dev-config-file
  OPERATOR_HOLOGRAPH_CONFIG_FILE_DATA: dev-config-file
  #
  HOLOGRAPH_ENVIRONMENT: develop
  HOLOGRAPH_ADDRESS: ${{ secrets.DEV_HOLOGRAPH_ADDRESS }}
  BLOCK_PROCESSING_VERSION: 'V2'
  #
  STG_DOMAIN: 'holograph.xyz' # needed only for the health checks
  #
  STG_COMMON_NAMESPACE: 'develop'
  STG_COMMON_NAMESPACE_V2: 'develop-v2'
  #
  # V1 INDEXER DEV rpc endpoints
  indexer_dev_avalancheTestnet_rpc_url: ${{ secrets.INDEXER_DEV_FUJI_RPC_URL }}
  indexer_dev_polygonTestnet_rpc_url: ${{ secrets.INDEXER_DEV_MUMBAI_RPC_URL }}
  indexer_dev_binanceTestnet_rpc_url: ${{ secrets.INDEXER_DEV_BSC_TESTNET_RPC_URL }}
  indexer_dev_mantleTestnet_rpc_url: 'https://rpc.testnet.mantle.xyz'
  indexer_dev_ethereumTestnetGoerli_rpc_url: ${{ secrets.INDEXER_DEV_GOERLI_RPC_URL }}
  indexer_dev_optimismTestnetGoerli_rpc_url: ${{ secrets.INDEXER_DEV_OPTIMISM_GOERLI_RPC_URL }}
  indexer_dev_arbitrumTestnetGoerli_rpc_url: ${{ secrets.INDEXER_DEV_ARBITRUM_GOERLI_RPC_URL }}
  indexer_dev_zoraTestnetGoerli_rpc_url: 'https://testnet.rpc.zora.energy'
  indexer_dev_baseTestnetGoerli_rpc_url: ${{ secrets.INDEXER_DEV_BASE_GOERLI_RPC_URL }}
  #
  indexer_dev_private_key: ${{ secrets.INDEXER_DEV_PRIVATE_KEY }}
  indexer_dev_address: ${{ secrets.INDEXER_DEV_ADDRESS }}
  # V1 OPERATOR DEV rpc endpoints
  operator_dev_avalancheTestnet_rpc_url: ${{ secrets.OPERATOR_DEV_FUJI_RPC_URL }}
  operator_dev_polygonTestnet_rpc_url: ${{ secrets.OPERATOR_DEV_MUMBAI_RPC_URL }}
  operator_dev_binanceTestnet_rpc_url: ${{ secrets.OPERATOR_DEV_BSC_TESTNET_RPC_URL }}
  operator_dev_mantleTestnet_rpc_url: 'https://rpc.testnet.mantle.xyz'
  operator_dev_ethereumTestnetGoerli_rpc_url: ${{ secrets.OPERATOR_DEV_GOERLI_RPC_URL }}
  operator_dev_optimismTestnetGoerli_rpc_url: ${{ secrets.OPERATOR_DEV_OPTIMISM_GOERLI_RPC_URL }}
  operator_dev_arbitrumTestnetGoerli_rpc_url: ${{ secrets.OPERATOR_DEV_ARBITRUM_GOERLI_RPC_URL }}
  operator_dev_zoraTestnetGoerli_rpc_url: 'https://testnet.rpc.zora.energy'
  operator_dev_baseTestnetGoerli_rpc_url: ${{ secrets.OPERATOR_DEV_BASE_GOERLI_RPC_URL }}
  #
  operator_dev_private_key: ${{ secrets.OPERATOR_DEV_PRIVATE_KEY }}
  operator_dev_address: ${{ secrets.OPERATOR_DEV_ADDRESS }}
  #
  # V2 INDEXER DEV rpc endpoints
  v2_indexer_dev_avalancheTestnet_rpc_url: ${{ secrets.INDEXER_DEV_FUJI_RPC_URL }}
  v2_indexer_dev_polygonTestnet_rpc_url: ${{ secrets.INDEXER_DEV_MUMBAI_RPC_URL }}
  v2_indexer_dev_ethereumTestnetSepolia_rpc_url: ${{ secrets.INDEXER_DEV_ETHEREUM_SEPOLIA_RPC_URL }}
  v2_indexer_dev_optimismTestnetSepolia_rpc_url: 'https://sepolia.optimism.io'
  v2_indexer_dev_arbitrumTestnetSepolia_rpc_url: ${{ secrets.INDEXER_DEV_ARBITRUM_SEPOLIA_RPC_URL }}
  v2_indexer_dev_binanceTestnet_rpc_url: ${{ secrets.INDEXER_DEV_BSC_TESTNET_RPC_URL }}
  v2_indexer_dev_mantleTestnet_rpc_url: 'https://rpc.testnet.mantle.xyz'
  v2_indexer_dev_zoraTestnetSepolia_rpc_url: 'https://sepolia.rpc.zora.energy'
  v2_indexer_dev_baseTestnetSepolia_rpc_url: ${{ secrets.INDEXER_DEV_BASE_SEPOLIA_RPC_URL }}
  #
  v2_indexer_dev_private_key: ${{ secrets.INDEXER_DEV_PRIVATE_KEY }}
  v2_indexer_dev_address: ${{ secrets.INDEXER_DEV_ADDRESS }}
  # V2 OPERATOR DEV rpc endpoints
  v2_operator_dev_avalancheTestnet_rpc_url: ${{ secrets.OPERATOR_DEV_FUJI_RPC_URL }}
  v2_operator_dev_polygonTestnet_rpc_url: ${{ secrets.OPERATOR_DEV_MUMBAI_RPC_URL }}
  v2_operator_dev_ethereumTestnetSepolia_rpc_url: ${{ secrets.OPERATOR_DEV_ETHEREUM_SEPOLIA_RPC_URL }}
  v2_operator_dev_optimismTestnetSepolia_rpc_url: 'https://sepolia.optimism.io'
  v2_operator_dev_arbitrumTestnetSepolia_rpc_url: ${{ secrets.OPERATOR_DEV_ARBITRUM_SEPOLIA_RPC_URL }}
  v2_operator_dev_binanceTestnet_rpc_url: ${{ secrets.OPERATOR_DEV_BSC_TESTNET_RPC_URL }}
  v2_operator_dev_mantleTestnet_rpc_url: 'https://rpc.testnet.mantle.xyz'
  v2_operator_dev_zoraTestnetSepolia_rpc_url: 'https://sepolia.rpc.zora.energy'
  v2_operator_dev_baseTestnetSepolia_rpc_url: ${{ secrets.OPERATOR_DEV_BASE_SEPOLIA_RPC_URL }}
  #
  v2_operator_dev_private_key: ${{ secrets.OPERATOR_DEV_PRIVATE_KEY }}
  v2_operator_dev_address: ${{ secrets.OPERATOR_DEV_ADDRESS }}
  #
  # SQS User [indexer_processor_sqs_user]
  SQS_USER_AWS_ACCESS_KEY_ID: ${{ secrets.SQS_INDEXER_PROCESSOR_USER_AWS_KEY_ID }}
  SQS_USER_AWS_SECRET_ACCESS_KEY: ${{ secrets.SQS_INDEXER_PROCESSOR_USER_AWS_ACCESS_KEY }}
  DEV_SQS_ENDPOINT: 'https://sqs.us-west-2.amazonaws.com'
  DEV_SQS_QUEUE_URL: 'https://sqs.us-west-2.amazonaws.com/177635894328/dev-indexer-processor'
  DEV_SQS_QUEUE_URL_V2: 'https://sqs.us-west-2.amazonaws.com/177635894328/dev-indexer-processor'

  #######################################
  STG_HOLOGRAPH_INDEXER_HELM_CHART_VERSION: 0.1.56
  INDEXER_RELEASE_NAME: 'indexer-dev' # format -> [release_name]-indexer-[env]
  INDEXER_RELEASE_NAME_V2: 'indexer-dev-v2'
  #
  STG_HOLOGRAPH_OPERATOR_HELM_CHART_VERSION: 0.0.95
  OPERATOR_RELEASE_NAME: 'operator-dev' # format -> [release_name]-operator-[env]
  OPERATOR_RELEASE_NAME_V2: 'operator-dev-v2'
  #######################################

on:
  push:
    branches:
      - 'develop'
      # Excluded branches
      - '!testnet'
      - '!main'
      - '!mainnet'
      - '!master'

jobs:
  deploy-to-staging:
    name: Deploy-to-staging[dev]
    runs-on: ubuntu-latest

    steps:
      - name: Use Githubs federated identity with AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout the code
        uses: actions/checkout@v2

      # This is a separate action that sets up buildx runner
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      # So now you can use Actions' own caching!
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      # And make it available for builds
      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          build-args: AWS_ECR_URL=${{ steps.login-ecr.outputs.registry }}
          platforms: linux/amd64
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.DEV_IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          push: true # set false to deactivate the push to ECR

      # This ugly bit is necessary if you don't want your cache to grow forever until it hits GitHub's limit of 5GB.
      # https://github.com/docker/build-push-action/issues/252 & https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Configure AWS creds to access EKS
        # TIP: the deployment user must be in the masters group in the aws-auth config map in the cluster
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_KEY_ID }} #notice: unique for each env
          aws-secret-access-key: ${{ env.AWS_ACCESS_KEY }} #notice: unique for each env
          aws-region: ${{ env.AWS_REGION }}

#      - name: Create ns [${{ env.STG_COMMON_NAMESPACE }}]
#        uses: tensor-hq/eksctl-helm-action@main
#        with:
#          eks_cluster: ${{ env.CLUSTER_NAME }}
#          command: |-
#            kubectl create namespace ${{ env.STG_COMMON_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      # NOTICE: --- INDEXER ---
      - name: Pull the holograph-indexer helm chart version x.x.x from ECR
        shell: bash
        env:
          #
          CHART_REPO: holo-indexer
          CHART_VERSION: ${{ env.STG_HOLOGRAPH_INDEXER_HELM_CHART_VERSION }}
          #
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          helm pull oci://$ECR_REGISTRY/$CHART_REPO --version $CHART_VERSION

      # NOTICE: ##### V1 deployments ######

      - name: -> V1 -- Deploy INDEXER cli in staging [namespace -> ${{ env.STG_COMMON_NAMESPACE }}]
        uses: tensor-hq/eksctl-helm-action@main
        env:
          RELEASE_NAME: ${{ env.INDEXER_RELEASE_NAME }} # notice
          HOLOGRAPH_VERSION: "V1"
          #
          ENABLE_DEBUG: 'true'
          HEALTHCHECK: 'true'
          MODE: 'auto'
          ENABLE_UNSAFE: 'false'
          ENABLE_SYNC: 'true'
          ENABLE_PROCESS_BLOCK_RANGE: 'true' # undefined/true
          UPDATE_BLOCK_HEIGHT: 'api' # api/file/disable
          #
          ENABLE_PROCESS_BLOCK_RANGE_arbitrum: 'true' # undefined/true
          ENABLE_PROCESS_BLOCK_RANGE_optimism: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_binance: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_mantle: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_zora: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_avalanche: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_ethereum: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_polygon: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_base: 'true'
          #
          AVALANCHE_NETWORK: 'fuji'
          POLYGON_NETWORK: 'mumbai'
          BINANCE_NETWORK: 'binanceSmartChainTestnet'
          MANTLE_NETWORK: 'mantleTestnet'
          ETHEREUM_NETWORK: '{ethereumTestnetGoerli}'
          OPTIMISM_NETWORK: '{optimismTestnetGoerli}'
          ARBITRUM_NETWORK: '{arbitrumTestnetGoerli}'
          ZORA_NETWORK: '{zoraTestnetGoerli}'
          BASE_NETWORK: '{baseTestnetGoerli}'
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            helm upgrade --install $RELEASE_NAME \
            holo-indexer-${{ env.STG_HOLOGRAPH_INDEXER_HELM_CHART_VERSION }}.tgz \
            -n ${{ env.STG_COMMON_NAMESPACE }} \
            \
            --set image.repository=${{ env.ECR_REPOSITORY }} \
            --set image.image_tag=${{ env.DEV_IMAGE_TAG }} \
            --set config_file_data=${{ env.INDEXER_HOLOGRAPH_CONFIG_FILE_DATA }} \
            --set holo_indexer_password=${{ env.STG_HOLOGRAPH_INDEXER_PASSWORD }} \
            --set HOLO_INDEXER_HOST=${{ env.STG_HOLOGRAPH_INDEXER_HOST }} \
            --set OPERATOR_API_KEY=${{ env.STG_HOLOGRAPH_INDEXER_OPERATOR_API_KEY }} \
            --set HOLOGRAPH_ENVIRONMENT=${{ env.HOLOGRAPH_ENVIRONMENT }} \
            --set HOLOGRAPH_VERSION=${{ env.HOLOGRAPH_VERSION }} \
            --set BLOCK_PROCESSING_VERSION=${{ env.BLOCK_PROCESSING_VERSION }} \
            \
            --set ENABLE_DEBUG=$ENABLE_DEBUG \
            --set ENABLE_SYNC=$ENABLE_SYNC \
            --set HEALTHCHECK=$HEALTHCHECK \
            --set MODE=$MODE \
            \
            --set AVALANCHE_NETWORK="${AVALANCHE_NETWORK}" \
            --set POLYGON_NETWORK="${POLYGON_NETWORK}" \
            --set BINANCE_NETWORK="${BINANCE_NETWORK}" \
            --set MANTLE_NETWORK="${MANTLE_NETWORK}" \
            --set ETHEREUM_NETWORK="${ETHEREUM_NETWORK}" \
            --set OPTIMISM_NETWORK="${OPTIMISM_NETWORK}" \
            --set ARBITRUM_NETWORK="${ARBITRUM_NETWORK}" \
            --set ZORA_NETWORK="${ZORA_NETWORK}" \
            --set BASE_NETWORK="${BASE_NETWORK}" \
            \
            --set ENABLE_UNSAFE="${ENABLE_UNSAFE}" \
            --set UPDATE_BLOCK_HEIGHT=$UPDATE_BLOCK_HEIGHT \
            \
            --set ENABLE_PROCESS_BLOCK_RANGE.arbitrum=$ENABLE_PROCESS_BLOCK_RANGE_arbitrum \
            --set ENABLE_PROCESS_BLOCK_RANGE.binance=$ENABLE_PROCESS_BLOCK_RANGE_binance \
            --set ENABLE_PROCESS_BLOCK_RANGE.avalanche=$ENABLE_PROCESS_BLOCK_RANGE_avalanche \
            --set ENABLE_PROCESS_BLOCK_RANGE.optimism=$ENABLE_PROCESS_BLOCK_RANGE_optimism \
            --set ENABLE_PROCESS_BLOCK_RANGE.ethereum=$ENABLE_PROCESS_BLOCK_RANGE_ethereum \
            --set ENABLE_PROCESS_BLOCK_RANGE.polygon=$ENABLE_PROCESS_BLOCK_RANGE_polygon \
            --set ENABLE_PROCESS_BLOCK_RANGE.mantle=$ENABLE_PROCESS_BLOCK_RANGE_mantle \
            --set ENABLE_PROCESS_BLOCK_RANGE.zora=$ENABLE_PROCESS_BLOCK_RANGE_zora \
            --set ENABLE_PROCESS_BLOCK_RANGE.base=$ENABLE_PROCESS_BLOCK_RANGE_base \
            \
            --set dev_rpc_config_values.avalancheTestnet_rpc_url=${{ env.indexer_dev_avalancheTestnet_rpc_url }} \
            --set dev_rpc_config_values.polygonTestnet_rpc_url=${{ env.indexer_dev_polygonTestnet_rpc_url }} \
            --set dev_rpc_config_values.ethereumTestnetGoerli_rpc_url=${{ env.indexer_dev_ethereumTestnetGoerli_rpc_url }} \
            --set dev_rpc_config_values.optimismTestnetGoerli_rpc_url=${{ env.indexer_dev_optimismTestnetGoerli_rpc_url }} \
            --set dev_rpc_config_values.arbitrumTestnetGoerli_rpc_url=${{ env.indexer_dev_arbitrumTestnetGoerli_rpc_url }} \
            --set dev_rpc_config_values.binanceTestnet_rpc_url=${{ env.indexer_dev_binanceTestnet_rpc_url }} \
            --set dev_rpc_config_values.mantleTestnet_rpc_url=${{ env.indexer_dev_mantleTestnet_rpc_url }} \
            --set dev_rpc_config_values.zoraTestnetGoerli_rpc_url=${{ env.indexer_dev_zoraTestnetGoerli_rpc_url }} \
            --set dev_rpc_config_values.baseTestnetGoerli_rpc_url=${{ env.indexer_dev_baseTestnetGoerli_rpc_url }} \
            \
            --set dev_rpc_config_values.private_key=${{ env.indexer_dev_private_key }} \
            --set dev_rpc_config_values.address=${{ env.indexer_dev_address }} \
            --set dev_rpc_config_values.version="beta3" \
            \
            --set datadog_tags.env=${{ env.CLUSTER_NAME }} \
            --set datadog_tags.service=$RELEASE_NAME \
            --set datadog_tags.version=$RELEASE_NAME-${{ env.STG_HOLOGRAPH_INDEXER_HELM_CHART_VERSION }} \
            \
            --set autoscaling.enabled=false \
            --set replicaCountAvalanche=1 \
            --set replicaCountPolygon=1 \
            --set replicaCountBinance=1 \
            --set replicaCountMantle=1 \
            --set replicaCountEthereum=1 \
            --set replicaCountArbitrum=1 \
            --set replicaCountOptimism=1 \
            --set replicaCountBase=1 \
            --set replicaCountZora=1 \
            \
            --set resources.ethereum.limits.memory=520Mi \
            --set resources.ethereum.requests.cpu=100m \
            --set resources.ethereum.requests.memory=500Mi \
            \
            --set resources.optimism.limits.memory=320Mi \
            --set resources.optimism.requests.cpu=100m \
            --set resources.optimism.requests.memory=300Mi \
            \
            --set resources.arbitrum.limits.memory=320Mi \
            --set resources.arbitrum.requests.cpu=100m \
            --set resources.arbitrum.requests.memory=300Mi \
            \
            --set resources.polygon.limits.memory=520Mi \
            --set resources.polygon.requests.cpu=100m \
            --set resources.polygon.requests.memory=500Mi \
            \
            --set resources.avalanche.limits.memory=320Mi \
            --set resources.avalanche.requests.cpu=100m \
            --set resources.avalanche.requests.memory=300Mi \
            \
            --set resources.binance.limits.memory=520Mi \
            --set resources.binance.requests.cpu=100m \
            --set resources.binance.requests.memory=500Mi \
            \
            --set resources.mantle.limits.memory=320Mi \
            --set resources.mantle.requests.cpu=100m \
            --set resources.mantle.requests.memory=300Mi \
            \
            --set resources.zora.limits.memory=320Mi \
            --set resources.zora.requests.cpu=100m \
            --set resources.zora.requests.memory=300Mi \
            \
            --set resources.base.limits.memory=320Mi \
            --set resources.base.requests.cpu=100m \
            --set resources.base.requests.memory=300Mi \
            \
            --set sqs.SQS_USER_AWS_ACCESS_KEY_ID=${{ env.SQS_USER_AWS_ACCESS_KEY_ID }} \
            --set sqs.SQS_USER_AWS_SECRET_ACCESS_KEY=${{ env.SQS_USER_AWS_SECRET_ACCESS_KEY }} \
            --set sqs.SQS_ENDPOINT=${{ env.DEV_SQS_ENDPOINT }} \
            --set sqs.SQS_QUEUE_URL=${{ env.DEV_SQS_QUEUE_URL }} \
            --set sqs.AWS_REGION=us-west-2 \
            \
            --values .github/values_for_stg_alb_ingress.yaml \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/certificate-arn"='${{ env.ALB_CERT_ARN }}' \
            --set ingress.ingress_name=ing-$RELEASE_NAME-health \
            --set ingress.host=$RELEASE_NAME-health.${{ env.STG_DOMAIN }} \
            --set ingress.target_svc_name=$RELEASE_NAME-holo-indexer \
            --set ingress.blue_green_deployment=false

      - name: Pause for 60 seconds
        shell: bash
        run: |
          sleep 60

      # NOTICE: --- OPERATOR ---
      - name: Pull the holograph-operator helm chart version x.x.x from ECR
        shell: bash
        env:
          #
          CHART_REPO: holo-operator
          CHART_VERSION: ${{ env.STG_HOLOGRAPH_OPERATOR_HELM_CHART_VERSION }}
          #
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          helm pull oci://$ECR_REGISTRY/$CHART_REPO --version $CHART_VERSION
      ######
      - name: -> V1 -- Deploy OPERATOR cli in staging [namespace -> ${{ env.STG_COMMON_NAMESPACE }}]
        uses: tensor-hq/eksctl-helm-action@main
        env:
          RELEASE_NAME: ${{ env.OPERATOR_RELEASE_NAME }} # notice
          HOLOGRAPH_VERSION: "V1"
          #
          ENABLE_DEBUG: 'true'
          ENABLE_SYNC: 'true'
          HEALTHCHECK: 'true'
          MODE: 'auto'
          ENABLE_UNSAFE: 'false'
          ENABLE_PROCESS_BLOCK_RANGE: 'true' # undefined/true
          UPDATE_BLOCK_HEIGHT: 'api' # api/file/disable
          #
          ENABLE_PROCESS_BLOCK_RANGE_arbitrum: 'true' # undefined/true
          ENABLE_PROCESS_BLOCK_RANGE_optimism: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_binance: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_mantle: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_zora: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_avalanche: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_ethereum: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_polygon: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_base: 'true'
          #
          AVALANCHE_NETWORK: 'fuji'
          POLYGON_NETWORK: 'mumbai'
          BINANCE_NETWORK: 'binanceSmartChainTestnet'
          MANTLE_NETWORK: 'mantleTestnet'
          ETHEREUM_NETWORK: '{ethereumTestnetGoerli}'
          OPTIMISM_NETWORK: '{optimismTestnetGoerli}'
          ARBITRUM_NETWORK: '{arbitrumTestnetGoerli}'
          ZORA_NETWORK: '{zoraTestnetGoerli}'
          BASE_NETWORK: '{baseTestnetGoerli}'
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            helm upgrade --install $RELEASE_NAME \
            holo-operator-${{ env.STG_HOLOGRAPH_OPERATOR_HELM_CHART_VERSION }}.tgz \
            -n ${{ env.STG_COMMON_NAMESPACE }} \
            \
            --set image.repository=${{ env.ECR_REPOSITORY }} \
            --set image.image_tag=${{ env.DEV_IMAGE_TAG }} \
            --set config_file_data=${{ env.OPERATOR_HOLOGRAPH_CONFIG_FILE_DATA }} \
            --set holo_operator_password=${{ env.STG_HOLOGRAPH_OPERATOR_PASSWORD }} \
            --set HOLO_OPERATOR_HOST=${{ env.STG_HOLOGRAPH_OPERATOR_HOST }} \
            --set OPERATOR_API_KEY=${{ env.STG_HOLOGRAPH_OPERATOR_OPERATOR_API_KEY }} \
            --set HOLOGRAPH_ENVIRONMENT=${{ env.HOLOGRAPH_ENVIRONMENT }} \
            --set HOLOGRAPH_VERSION=${{ env.HOLOGRAPH_VERSION }} \
            \
            --set ENABLE_DEBUG=$ENABLE_DEBUG \
            --set ENABLE_SYNC=$ENABLE_SYNC \
            --set HEALTHCHECK=$HEALTHCHECK \
            --set MODE=$MODE \
            --set ENABLE_UNSAFE="${ENABLE_UNSAFE}" \
            --set UPDATE_BLOCK_HEIGHT=$UPDATE_BLOCK_HEIGHT \
            \
            --set ENABLE_PROCESS_BLOCK_RANGE.arbitrum=$ENABLE_PROCESS_BLOCK_RANGE_arbitrum \
            --set ENABLE_PROCESS_BLOCK_RANGE.binance=$ENABLE_PROCESS_BLOCK_RANGE_binance \
            --set ENABLE_PROCESS_BLOCK_RANGE.avalanche=$ENABLE_PROCESS_BLOCK_RANGE_avalanche \
            --set ENABLE_PROCESS_BLOCK_RANGE.optimism=$ENABLE_PROCESS_BLOCK_RANGE_optimism \
            --set ENABLE_PROCESS_BLOCK_RANGE.ethereum=$ENABLE_PROCESS_BLOCK_RANGE_ethereum \
            --set ENABLE_PROCESS_BLOCK_RANGE.polygon=$ENABLE_PROCESS_BLOCK_RANGE_polygon \
            --set ENABLE_PROCESS_BLOCK_RANGE.mantle=$ENABLE_PROCESS_BLOCK_RANGE_mantle \
            --set ENABLE_PROCESS_BLOCK_RANGE.zora=$ENABLE_PROCESS_BLOCK_RANGE_zora \
            --set ENABLE_PROCESS_BLOCK_RANGE.base=$ENABLE_PROCESS_BLOCK_RANGE_base \
            \
            --set AVALANCHE_NETWORK="${AVALANCHE_NETWORK}" \
            --set POLYGON_NETWORK="${POLYGON_NETWORK}" \
            --set BINANCE_NETWORK="${BINANCE_NETWORK}" \
            --set MANTLE_NETWORK="${MANTLE_NETWORK}" \
            --set ETHEREUM_NETWORK="${ETHEREUM_NETWORK}" \
            --set OPTIMISM_NETWORK="${OPTIMISM_NETWORK}" \
            --set ARBITRUM_NETWORK="${ARBITRUM_NETWORK}" \
            --set ZORA_NETWORK="${ZORA_NETWORK}" \
            --set BASE_NETWORK="${BASE_NETWORK}" \
            \
            --set dev_rpc_config_values.avalancheTestnet_rpc_url=${{ env.operator_dev_avalancheTestnet_rpc_url }} \
            --set dev_rpc_config_values.polygonTestnet_rpc_url=${{ env.operator_dev_polygonTestnet_rpc_url }} \
            --set dev_rpc_config_values.binanceTestnet_rpc_url=${{ env.operator_dev_binanceTestnet_rpc_url }} \
            --set dev_rpc_config_values.mantleTestnet_rpc_url=${{ env.operator_dev_mantleTestnet_rpc_url }} \
            --set dev_rpc_config_values.ethereumTestnetGoerli_rpc_url=${{ env.operator_dev_ethereumTestnetGoerli_rpc_url }} \
            --set dev_rpc_config_values.optimismTestnetGoerli_rpc_url=${{ env.operator_dev_optimismTestnetGoerli_rpc_url }} \
            --set dev_rpc_config_values.arbitrumTestnetGoerli_rpc_url=${{ env.operator_dev_arbitrumTestnetGoerli_rpc_url }} \
            --set dev_rpc_config_values.zoraTestnetGoerli_rpc_url=${{ env.operator_dev_zoraTestnetGoerli_rpc_url }} \
            --set dev_rpc_config_values.baseTestnetGoerli_rpc_url=${{ env.operator_dev_baseTestnetGoerli_rpc_url }} \
            \
            --set dev_rpc_config_values.private_key=${{ env.operator_dev_private_key }} \
            --set dev_rpc_config_values.address=${{ env.operator_dev_address }} \
            \
            --set autoscaling.enabled=false \
            --set replicaCountAvalanche=1 \
            --set replicaCountPolygon=1 \
            --set replicaCountBinance=1 \
            --set replicaCountMantle=1 \
            --set replicaCountEthereum=1 \
            --set replicaCountArbitrum=1 \
            --set replicaCountOptimism=1 \
            --set replicaCountBase=1 \
            --set replicaCountZora=1 \
            \
            --set resources.ethereum.limits.memory=550Mi \
            --set resources.ethereum.requests.cpu=100m \
            --set resources.ethereum.requests.memory=500Mi \
            \
            --set resources.optimism.limits.memory=350Mi \
            --set resources.optimism.requests.cpu=100m \
            --set resources.optimism.requests.memory=300Mi \
            \
            --set resources.arbitrum.limits.memory=350Mi \
            --set resources.arbitrum.requests.cpu=100m \
            --set resources.arbitrum.requests.memory=300Mi \
            \
            --set resources.polygon.limits.memory=350Mi \
            --set resources.polygon.requests.cpu=100m \
            --set resources.polygon.requests.memory=300Mi \
            \
            --set resources.avalanche.limits.memory=350Mi \
            --set resources.avalanche.requests.cpu=100m \
            --set resources.avalanche.requests.memory=300Mi \
            \
            --set resources.binance.limits.memory=350Mi \
            --set resources.binance.requests.cpu=100m \
            --set resources.binance.requests.memory=300Mi \
            \
            --set resources.mantle.limits.memory=350Mi \
            --set resources.mantle.requests.cpu=100m \
            --set resources.mantle.requests.memory=300Mi \
            \
            --set resources.zora.limits.memory=350Mi \
            --set resources.zora.requests.cpu=100m \
            --set resources.zora.requests.memory=300Mi \
            \
            --set resources.base.limits.memory=350Mi \
            --set resources.base.requests.cpu=100m \
            --set resources.base.requests.memory=300Mi \
            \
            --set datadog_tags.env=${{ env.CLUSTER_NAME }} \
            --set datadog_tags.service=$RELEASE_NAME \
            --set datadog_tags.version=$RELEASE_NAME-${{ env.STG_HOLOGRAPH_OPERATOR_HELM_CHART_VERSION }} \
            \
            --values .github/values_for_stg_alb_ingress.yaml \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/certificate-arn"='${{ env.ALB_CERT_ARN }}' \
            --set ingress.ingress_name=ing-$RELEASE_NAME-health \
            --set ingress.host=$RELEASE_NAME-health.${{ env.STG_DOMAIN }} \
            --set ingress.target_svc_name=$RELEASE_NAME-holo-operator \
            --set ingress.blue_green_deployment=false

#      - name: -> V1 -- Info for the new V1 deployments
#        uses: tensor-hq/eksctl-helm-action@main
#        env:
#          INDEXER_RELEASE_NAME: ${{ env.INDEXER_RELEASE_NAME }}
#          OPERATOR_RELEASE_NAME: ${{ env.OPERATOR_RELEASE_NAME }}
#          LB_URL: 'https://staging-alb-1490082055.us-west-2.elb.amazonaws.com'
#        with:
#          eks_cluster: ${{ env.CLUSTER_NAME }}
#          command: |-
#            echo "------------------------- Last n Helm releases -------------------------"
#            echo "--INDEXER--"
#            helm history $INDEXER_RELEASE_NAME  -n ${{ env.STG_COMMON_NAMESPACE }} --max 3
#            echo "--OPERATOR--"
#            helm history $OPERATOR_RELEASE_NAME -n ${{ env.STG_COMMON_NAMESPACE }} --max 3
#
#            echo "------------------------ Newly deployed image [same for all apps] ------------------------"
#            echo "$DEV_IMAGE_TAG"
#
#            echo "------------------------ Healthchecks ------------------------"
#            sleep 55
#
#            ENDPOINT=$INDEXER_RELEASE_NAME-health.${{ env.STG_DOMAIN }}
#            echo "curl -k -H \"Host: $ENDPOINT\" $LB_URL/healthcheck"
#            curl -k -H "Host: $ENDPOINT" $LB_URL/healthcheck | jq '.status'
#
#            ENDPOINT=$OPERATOR_RELEASE_NAME-health.${{ env.STG_DOMAIN }}
#            echo "curl -k -H \"Host: $ENDPOINT\" $LB_URL/healthcheck"
#            curl -k -H "Host: $ENDPOINT" $LB_URL/healthcheck | jq '.status'

      # NOTICE: ##### V2 deployments ######

      - name: -> V2 -- Deploy INDEXER cli in staging [namespace -> ${{ env.STG_COMMON_NAMESPACE_V2 }}]
        uses: tensor-hq/eksctl-helm-action@main
        env:
          RELEASE_NAME: ${{ env.INDEXER_RELEASE_NAME_V2 }} # notice
          HOLOGRAPH_VERSION: "V2"
          #
          ENABLE_DEBUG: 'true'
          HEALTHCHECK: 'true'
          MODE: 'auto'
          ENABLE_UNSAFE: 'false'
          ENABLE_SYNC: 'true'
          ENABLE_PROCESS_BLOCK_RANGE: 'true' # undefined/true
          UPDATE_BLOCK_HEIGHT: 'api' # api/file/disable
          #
          ENABLE_PROCESS_BLOCK_RANGE_arbitrum: 'true' # undefined/true
          ENABLE_PROCESS_BLOCK_RANGE_optimism: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_binance: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_mantle: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_zora: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_avalanche: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_ethereum: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_polygon: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_base: 'true'
          #
          AVALANCHE_NETWORK: 'fuji'
          POLYGON_NETWORK: 'mumbai'
          BINANCE_NETWORK: 'binanceSmartChainTestnet'
          MANTLE_NETWORK: 'mantleTestnet'
          ETHEREUM_NETWORK: '{ethereumTestnetSepolia}'
          OPTIMISM_NETWORK: '{optimismTestnetSepolia}'
          ARBITRUM_NETWORK: '{arbitrumTestnetSepolia}'
          ZORA_NETWORK: '{zoraTestnetSepolia}'
          BASE_NETWORK: '{baseTestnetSepolia}'
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            helm upgrade --install $RELEASE_NAME \
            holo-indexer-${{ env.STG_HOLOGRAPH_INDEXER_HELM_CHART_VERSION }}.tgz \
            -n ${{ env.STG_COMMON_NAMESPACE_V2 }} \
            \
            --set image.repository=${{ env.ECR_REPOSITORY }} \
            --set image.image_tag=${{ env.DEV_IMAGE_TAG }} \
            --set config_file_data=${{ env.INDEXER_HOLOGRAPH_CONFIG_FILE_DATA }} \
            --set holo_indexer_password=${{ env.STG_HOLOGRAPH_INDEXER_PASSWORD }} \
            --set HOLO_INDEXER_HOST=${{ env.STG_HOLOGRAPH_INDEXER_HOST }} \
            --set OPERATOR_API_KEY=${{ env.STG_HOLOGRAPH_INDEXER_OPERATOR_API_KEY }} \
            --set HOLOGRAPH_ENVIRONMENT=${{ env.HOLOGRAPH_ENVIRONMENT }} \
            --set HOLOGRAPH_ADDRESS=${{ env.HOLOGRAPH_ADDRESS }} \
            --set HOLOGRAPH_VERSION=${{ env.HOLOGRAPH_VERSION }} \
            --set BLOCK_PROCESSING_VERSION=${{ env.BLOCK_PROCESSING_VERSION }} \
            \
            --set ENABLE_DEBUG=$ENABLE_DEBUG \
            --set ENABLE_SYNC=$ENABLE_SYNC \
            --set HEALTHCHECK=$HEALTHCHECK \
            --set MODE=$MODE \
            \
            --set AVALANCHE_NETWORK="${AVALANCHE_NETWORK}" \
            --set POLYGON_NETWORK="${POLYGON_NETWORK}" \
            --set BINANCE_NETWORK="${BINANCE_NETWORK}" \
            --set MANTLE_NETWORK="${MANTLE_NETWORK}" \
            --set ETHEREUM_NETWORK="${ETHEREUM_NETWORK}" \
            --set OPTIMISM_NETWORK="${OPTIMISM_NETWORK}" \
            --set ARBITRUM_NETWORK="${ARBITRUM_NETWORK}" \
            --set ZORA_NETWORK="${ZORA_NETWORK}" \
            --set BASE_NETWORK="${BASE_NETWORK}" \
            \
            --set ENABLE_UNSAFE="${ENABLE_UNSAFE}" \
            --set UPDATE_BLOCK_HEIGHT=$UPDATE_BLOCK_HEIGHT \
            \
            --set ENABLE_PROCESS_BLOCK_RANGE.arbitrum=$ENABLE_PROCESS_BLOCK_RANGE_arbitrum \
            --set ENABLE_PROCESS_BLOCK_RANGE.binance=$ENABLE_PROCESS_BLOCK_RANGE_binance \
            --set ENABLE_PROCESS_BLOCK_RANGE.avalanche=$ENABLE_PROCESS_BLOCK_RANGE_avalanche \
            --set ENABLE_PROCESS_BLOCK_RANGE.optimism=$ENABLE_PROCESS_BLOCK_RANGE_optimism \
            --set ENABLE_PROCESS_BLOCK_RANGE.ethereum=$ENABLE_PROCESS_BLOCK_RANGE_ethereum \
            --set ENABLE_PROCESS_BLOCK_RANGE.polygon=$ENABLE_PROCESS_BLOCK_RANGE_polygon \
            --set ENABLE_PROCESS_BLOCK_RANGE.mantle=$ENABLE_PROCESS_BLOCK_RANGE_mantle \
            --set ENABLE_PROCESS_BLOCK_RANGE.zora=$ENABLE_PROCESS_BLOCK_RANGE_zora \
            --set ENABLE_PROCESS_BLOCK_RANGE.base=$ENABLE_PROCESS_BLOCK_RANGE_base \
            \
            --set dev_rpc_config_values.avalancheTestnet_rpc_url=${{ env.v2_indexer_dev_avalancheTestnet_rpc_url }} \
            --set dev_rpc_config_values.polygonTestnet_rpc_url=${{ env.v2_indexer_dev_polygonTestnet_rpc_url }} \
            --set dev_rpc_config_values.binanceTestnet_rpc_url=${{ env.v2_indexer_dev_binanceTestnet_rpc_url }} \
            --set dev_rpc_config_values.mantleTestnet_rpc_url=${{ env.v2_indexer_dev_mantleTestnet_rpc_url }} \
            --set dev_rpc_config_values.ethereumTestnetSepolia_rpc_url=${{ env.v2_indexer_dev_ethereumTestnetSepolia_rpc_url }} \
            --set dev_rpc_config_values.optimismTestnetSepolia_rpc_url=${{ env.v2_indexer_dev_optimismTestnetSepolia_rpc_url }} \
            --set dev_rpc_config_values.arbitrumTestnetSepolia_rpc_url=${{ env.v2_indexer_dev_arbitrumTestnetSepolia_rpc_url }} \
            --set dev_rpc_config_values.zoraTestnetSepolia_rpc_url=${{ env.v2_indexer_dev_zoraTestnetSepolia_rpc_url }} \
            --set dev_rpc_config_values.baseTestnetSepolia_rpc_url=${{ env.v2_indexer_dev_baseTestnetSepolia_rpc_url }} \
            \
            --set dev_rpc_config_values.private_key=${{ env.v2_indexer_dev_private_key }} \
            --set dev_rpc_config_values.address=${{ env.v2_indexer_dev_address }} \
            --set dev_rpc_config_values.version="beta3" \
            \
            --set datadog_tags.env=${{ env.CLUSTER_NAME }} \
            --set datadog_tags.service=$RELEASE_NAME \
            --set datadog_tags.version=$RELEASE_NAME-${{ env.STG_HOLOGRAPH_INDEXER_HELM_CHART_VERSION }} \
            \
            --set autoscaling.enabled=false \
            --set replicaCountAvalanche=1 \
            --set replicaCountPolygon=1 \
            --set replicaCountBinance=1 \
            --set replicaCountMantle=1 \
            --set replicaCountEthereum=1 \
            --set replicaCountArbitrum=1 \
            --set replicaCountOptimism=1 \
            --set replicaCountBase=1 \
            --set replicaCountZora=1 \
            \
            --set resources.ethereum.limits.memory=520Mi \
            --set resources.ethereum.requests.cpu=100m \
            --set resources.ethereum.requests.memory=500Mi \
            \
            --set resources.optimism.limits.memory=320Mi \
            --set resources.optimism.requests.cpu=100m \
            --set resources.optimism.requests.memory=300Mi \
            \
            --set resources.arbitrum.limits.memory=320Mi \
            --set resources.arbitrum.requests.cpu=100m \
            --set resources.arbitrum.requests.memory=300Mi \
            \
            --set resources.polygon.limits.memory=520Mi \
            --set resources.polygon.requests.cpu=100m \
            --set resources.polygon.requests.memory=500Mi \
            \
            --set resources.avalanche.limits.memory=320Mi \
            --set resources.avalanche.requests.cpu=100m \
            --set resources.avalanche.requests.memory=300Mi \
            \
            --set resources.binance.limits.memory=520Mi \
            --set resources.binance.requests.cpu=100m \
            --set resources.binance.requests.memory=500Mi \
            \
            --set resources.mantle.limits.memory=320Mi \
            --set resources.mantle.requests.cpu=100m \
            --set resources.mantle.requests.memory=300Mi \
            \
            --set resources.zora.limits.memory=320Mi \
            --set resources.zora.requests.cpu=100m \
            --set resources.zora.requests.memory=300Mi \
            \
            --set resources.base.limits.memory=320Mi \
            --set resources.base.requests.cpu=100m \
            --set resources.base.requests.memory=300Mi \
            \
            --set sqs.SQS_USER_AWS_ACCESS_KEY_ID=${{ env.SQS_USER_AWS_ACCESS_KEY_ID }} \
            --set sqs.SQS_USER_AWS_SECRET_ACCESS_KEY=${{ env.SQS_USER_AWS_SECRET_ACCESS_KEY }} \
            --set sqs.SQS_ENDPOINT=${{ env.DEV_SQS_ENDPOINT }} \
            --set sqs.SQS_QUEUE_URL=${{ env.DEV_SQS_QUEUE_URL_V2 }} \
            --set sqs.AWS_REGION=us-west-2 \
            \
            --values .github/values_for_stg_alb_ingress.yaml \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/certificate-arn"='${{ env.ALB_CERT_ARN }}' \
            --set ingress.ingress_name=ing-$RELEASE_NAME-health \
            --set ingress.host=$RELEASE_NAME-health.${{ env.STG_DOMAIN }} \
            --set ingress.target_svc_name=$RELEASE_NAME-holo-indexer \
            --set ingress.blue_green_deployment=false

      - name: Pause for 60 seconds
        shell: bash
        run: |
          sleep 60

      - name: -> V2 -- Deploy OPERATOR cli in staging [namespace -> ${{ env.STG_COMMON_NAMESPACE_V2 }}]
        uses: tensor-hq/eksctl-helm-action@main
        env:
          RELEASE_NAME: ${{ env.OPERATOR_RELEASE_NAME_V2 }} # notice
          HOLOGRAPH_VERSION: "V2"
          #
          ENABLE_DEBUG: 'true'
          ENABLE_SYNC: 'true'
          HEALTHCHECK: 'true'
          MODE: 'auto'
          ENABLE_UNSAFE: 'false'
          ENABLE_PROCESS_BLOCK_RANGE: 'true' # undefined/true
          UPDATE_BLOCK_HEIGHT: 'api' # api/file/disable
          #
          ENABLE_PROCESS_BLOCK_RANGE_arbitrum: 'true' # undefined/true
          ENABLE_PROCESS_BLOCK_RANGE_optimism: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_binance: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_mantle: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_zora: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_avalanche: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_ethereum: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_polygon: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_base: 'true'
          #
          AVALANCHE_NETWORK: 'fuji'
          POLYGON_NETWORK: 'mumbai'
          BINANCE_NETWORK: 'binanceSmartChainTestnet'
          MANTLE_NETWORK: 'mantleTestnet'
          ETHEREUM_NETWORK: '{ethereumTestnetSepolia}'
          OPTIMISM_NETWORK: '{optimismTestnetSepolia}'
          ARBITRUM_NETWORK: '{arbitrumTestnetSepolia}'
          ZORA_NETWORK: '{zoraTestnetSepolia}'
          BASE_NETWORK: '{baseTestnetSepolia}'
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            helm upgrade --install $RELEASE_NAME \
            holo-operator-${{ env.STG_HOLOGRAPH_OPERATOR_HELM_CHART_VERSION }}.tgz \
            -n ${{ env.STG_COMMON_NAMESPACE_V2 }} \
            \
            --set image.repository=${{ env.ECR_REPOSITORY }} \
            --set image.image_tag=${{ env.DEV_IMAGE_TAG }} \
            --set config_file_data=${{ env.OPERATOR_HOLOGRAPH_CONFIG_FILE_DATA }} \
            --set holo_operator_password=${{ env.STG_HOLOGRAPH_OPERATOR_PASSWORD }} \
            --set HOLO_OPERATOR_HOST=${{ env.STG_HOLOGRAPH_OPERATOR_HOST }} \
            --set OPERATOR_API_KEY=${{ env.STG_HOLOGRAPH_OPERATOR_OPERATOR_API_KEY }} \
            --set HOLOGRAPH_ENVIRONMENT=${{ env.HOLOGRAPH_ENVIRONMENT }} \
            --set HOLOGRAPH_ADDRESS=${{ env.HOLOGRAPH_ADDRESS }} \
            --set HOLOGRAPH_VERSION=${{ env.HOLOGRAPH_VERSION }} \
            \
            --set ENABLE_DEBUG=$ENABLE_DEBUG \
            --set ENABLE_SYNC=$ENABLE_SYNC \
            --set HEALTHCHECK=$HEALTHCHECK \
            --set MODE=$MODE \
            --set ENABLE_UNSAFE="${ENABLE_UNSAFE}" \
            --set UPDATE_BLOCK_HEIGHT=$UPDATE_BLOCK_HEIGHT \
            \
            --set ENABLE_PROCESS_BLOCK_RANGE.arbitrum=$ENABLE_PROCESS_BLOCK_RANGE_arbitrum \
            --set ENABLE_PROCESS_BLOCK_RANGE.binance=$ENABLE_PROCESS_BLOCK_RANGE_binance \
            --set ENABLE_PROCESS_BLOCK_RANGE.avalanche=$ENABLE_PROCESS_BLOCK_RANGE_avalanche \
            --set ENABLE_PROCESS_BLOCK_RANGE.optimism=$ENABLE_PROCESS_BLOCK_RANGE_optimism \
            --set ENABLE_PROCESS_BLOCK_RANGE.ethereum=$ENABLE_PROCESS_BLOCK_RANGE_ethereum \
            --set ENABLE_PROCESS_BLOCK_RANGE.polygon=$ENABLE_PROCESS_BLOCK_RANGE_polygon \
            --set ENABLE_PROCESS_BLOCK_RANGE.mantle=$ENABLE_PROCESS_BLOCK_RANGE_mantle \
            --set ENABLE_PROCESS_BLOCK_RANGE.zora=$ENABLE_PROCESS_BLOCK_RANGE_zora \
            --set ENABLE_PROCESS_BLOCK_RANGE.base=$ENABLE_PROCESS_BLOCK_RANGE_base \
            \
            --set AVALANCHE_NETWORK="${AVALANCHE_NETWORK}" \
            --set POLYGON_NETWORK="${POLYGON_NETWORK}" \
            --set BINANCE_NETWORK="${BINANCE_NETWORK}" \
            --set MANTLE_NETWORK="${MANTLE_NETWORK}" \
            --set ETHEREUM_NETWORK="${ETHEREUM_NETWORK}" \
            --set OPTIMISM_NETWORK="${OPTIMISM_NETWORK}" \
            --set ARBITRUM_NETWORK="${ARBITRUM_NETWORK}" \
            --set ZORA_NETWORK="${ZORA_NETWORK}" \
            --set BASE_NETWORK="${BASE_NETWORK}" \
            \
            --set dev_rpc_config_values.avalancheTestnet_rpc_url=${{ env.v2_operator_dev_avalancheTestnet_rpc_url }} \
            --set dev_rpc_config_values.polygonTestnet_rpc_url=${{ env.v2_operator_dev_polygonTestnet_rpc_url }} \
            --set dev_rpc_config_values.binanceTestnet_rpc_url=${{ env.v2_operator_dev_binanceTestnet_rpc_url }} \
            --set dev_rpc_config_values.mantleTestnet_rpc_url=${{ env.v2_operator_dev_mantleTestnet_rpc_url }} \
            --set dev_rpc_config_values.ethereumTestnetSepolia_rpc_url=${{ env.v2_operator_dev_ethereumTestnetSepolia_rpc_url }} \
            --set dev_rpc_config_values.optimismTestnetSepolia_rpc_url=${{ env.v2_operator_dev_optimismTestnetSepolia_rpc_url }} \
            --set dev_rpc_config_values.arbitrumTestnetSepolia_rpc_url=${{ env.v2_operator_dev_arbitrumTestnetSepolia_rpc_url }} \
            --set dev_rpc_config_values.zoraTestnetSepolia_rpc_url=${{ env.v2_operator_dev_zoraTestnetSepolia_rpc_url }} \
            --set dev_rpc_config_values.baseTestnetSepolia_rpc_url=${{ env.v2_operator_dev_baseTestnetSepolia_rpc_url }} \
            \
            --set dev_rpc_config_values.private_key=${{ env.v2_operator_dev_private_key }} \
            --set dev_rpc_config_values.address=${{ env.v2_operator_dev_address }} \
            \
            --set autoscaling.enabled=false \
            --set replicaCountAvalanche=1 \
            --set replicaCountPolygon=1 \
            --set replicaCountBinance=1 \
            --set replicaCountMantle=1 \
            --set replicaCountEthereum=1 \
            --set replicaCountArbitrum=1 \
            --set replicaCountOptimism=1 \
            --set replicaCountBase=1 \
            --set replicaCountZora=1 \
            \
            --set resources.ethereum.limits.memory=550Mi \
            --set resources.ethereum.requests.cpu=100m \
            --set resources.ethereum.requests.memory=500Mi \
            \
            --set resources.optimism.limits.memory=350Mi \
            --set resources.optimism.requests.cpu=100m \
            --set resources.optimism.requests.memory=300Mi \
            \
            --set resources.arbitrum.limits.memory=350Mi \
            --set resources.arbitrum.requests.cpu=100m \
            --set resources.arbitrum.requests.memory=300Mi \
            \
            --set resources.polygon.limits.memory=350Mi \
            --set resources.polygon.requests.cpu=100m \
            --set resources.polygon.requests.memory=300Mi \
            \
            --set resources.avalanche.limits.memory=350Mi \
            --set resources.avalanche.requests.cpu=100m \
            --set resources.avalanche.requests.memory=300Mi \
            \
            --set resources.binance.limits.memory=350Mi \
            --set resources.binance.requests.cpu=100m \
            --set resources.binance.requests.memory=300Mi \
            \
            --set resources.mantle.limits.memory=350Mi \
            --set resources.mantle.requests.cpu=100m \
            --set resources.mantle.requests.memory=300Mi \
            \
            --set resources.zora.limits.memory=350Mi \
            --set resources.zora.requests.cpu=100m \
            --set resources.zora.requests.memory=300Mi \
            \
            --set resources.base.limits.memory=350Mi \
            --set resources.base.requests.cpu=100m \
            --set resources.base.requests.memory=300Mi \
            \
            --set datadog_tags.env=${{ env.CLUSTER_NAME }} \
            --set datadog_tags.service=$RELEASE_NAME \
            --set datadog_tags.version=$RELEASE_NAME-${{ env.STG_HOLOGRAPH_OPERATOR_HELM_CHART_VERSION }} \
            \
            --values .github/values_for_stg_alb_ingress.yaml \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/certificate-arn"='${{ env.ALB_CERT_ARN }}' \
            --set ingress.ingress_name=ing-$RELEASE_NAME-health \
            --set ingress.host=$RELEASE_NAME-health.${{ env.STG_DOMAIN }} \
            --set ingress.target_svc_name=$RELEASE_NAME-holo-operator \
            --set ingress.blue_green_deployment=false

#      - name: -> V2 -- Info for the new V2 deployments
#        uses: tensor-hq/eksctl-helm-action@main
#        env:
#          INDEXER_RELEASE_NAME: ${{ env.INDEXER_RELEASE_NAME_V2 }}
#          OPERATOR_RELEASE_NAME: ${{ env.OPERATOR_RELEASE_NAME_V2 }}
#          LB_URL: 'https://staging-alb-1490082055.us-west-2.elb.amazonaws.com'
#        with:
#          eks_cluster: ${{ env.CLUSTER_NAME }}
#          command: |-
#            echo "------------------------- Last n Helm releases -------------------------"
#            echo "--V2 INDEXER--"
#            helm history $INDEXER_RELEASE_NAME  -n ${{ env.STG_COMMON_NAMESPACE_V2 }} --max 3
#            echo "--V2 OPERATOR--"
#            helm history $OPERATOR_RELEASE_NAME -n ${{ env.STG_COMMON_NAMESPACE_V2 }} --max 3
#
#            echo "------------------------ Newly deployed image [same for all apps] ------------------------"
#            echo "$DEV_IMAGE_TAG"
#
#            echo "------------------------ Healthchecks ------------------------"
#            sleep 55
#
#            ENDPOINT=$INDEXER_RELEASE_NAME-health.${{ env.STG_DOMAIN }}
#            echo "curl -k -H \"Host: $ENDPOINT\" $LB_URL/healthcheck"
#            curl -k -H "Host: $ENDPOINT" $LB_URL/healthcheck | jq '.status'
#
#            ENDPOINT=$OPERATOR_RELEASE_NAME-health.${{ env.STG_DOMAIN }}
#            echo "curl -k -H \"Host: $ENDPOINT\" $LB_URL/healthcheck"
#            curl -k -H "Host: $ENDPOINT" $LB_URL/healthcheck | jq '.status'
