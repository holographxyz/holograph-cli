name: Deploy V2 holoclis to staging[develop-v2]

permissions:
  id-token: write
  contents: read # This is required for actions/checkout@v2

env:
  AWS_REGION: us-west-2
  IAM_ROLE: arn:aws:iam::177635894328:role/Github_role_to_access_ECR
  ECR_REPOSITORY: holo-cli-dev # notice: the same for all cli apps
  #
  IMAGE_TAG: dev-${{ github.sha }}
  #
  CLUSTER_NAME: staging
  #
  AWS_KEY_ID: ${{ secrets.NEWSTAGE_USER_AWS_ACCESS_KEY_ID }}
  AWS_ACCESS_KEY: ${{ secrets.NEWSTAGE_USER_AWS_SECRET_ACCESS_KEY }}
  #
#  STG_HOLOGRAPH_INDEXER_HOST: 'http://devel-holo-api.develop.svc.cluster.local:443'
#  STG_HOLOGRAPH_OPERATOR_HOST: 'http://devel-holo-api.develop.svc.cluster.local:443'
  #
  # set the RPC endpoints config files
  INDEXER_HOLOGRAPH_CONFIG_FILE_DATA: dev-config-file
  OPERATOR_HOLOGRAPH_CONFIG_FILE_DATA: dev-config-file
  #
  HOLOGRAPH_ENVIRONMENT: develop
  BLOCK_PROCESSING_VERSION: 'V2'
  #
  STG_DOMAIN: 'holograph.xyz' # needed only for the health checks
  #
  # SQS User [indexer_processor_sqs_user]
  #
  STG_COMMON_NAMESPACE_V2: 'develop-v2'
  #######################################
  STG_HOLOGRAPH_INDEXER_HELM_CHART_VERSION: 0.1.73
  INDEXER_RELEASE_NAME_V2: 'indexer-dev-v2' # format -> [release_name]-indexer-[env]
  #
  STG_HOLOGRAPH_OPERATOR_HELM_CHART_VERSION: 0.1.8
  OPERATOR_RELEASE_NAME_V2: 'operator-dev-v2' # format -> [release_name]-indexer-[env]
  #######################################

on:
  push:
    branches:
      - 'develop'
      # Excluded branches
      - '!testnet'
      - '!main'
      - '!mainnet'
      - '!master'

jobs:
  deploy-to-staging:
    name: Deploy-to-staging[dev]
    runs-on: ubuntu-latest

    steps:
      - name: Use Githubs federated identity with AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          secret-ids: |
            DEV_INDEXER_V1
            DEV_OPERATOR_V1
            DEV_INDEXER_V2
            DEV_OPERATOR_V2
            COMMON
          parse-json-secrets: true # to be able to get the json k/v pairs

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout the code
        uses: actions/checkout@v2

      # This is a separate action that sets up buildx runner
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      # So now you can use Actions' own caching!
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      # And make it available for builds
      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          build-args: AWS_ECR_URL=${{ steps.login-ecr.outputs.registry }}
          platforms: linux/amd64
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          push: true # set false to deactivate the push to ECR

      # This ugly bit is necessary if you don't want your cache to grow forever until it hits GitHub's limit of 5GB.
      # https://github.com/docker/build-push-action/issues/252 & https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Configure AWS creds to access EKS
        # TIP: the deployment user must be in the masters group in the aws-auth config map in the cluster
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_KEY_ID }} #notice: unique for each env
          aws-secret-access-key: ${{ env.AWS_ACCESS_KEY }} #notice: unique for each env
          aws-region: ${{ env.AWS_REGION }}

#      - name: Create ns [${{ env.STG_COMMON_NAMESPACE }}]
#        uses: tensor-hq/eksctl-helm-action@main
#        with:
#          eks_cluster: ${{ env.CLUSTER_NAME }}
#          command: |-
#            kubectl create namespace ${{ env.STG_COMMON_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      # NOTICE: --- INDEXER ---
      - name: Pull the holograph-indexer helm chart version x.x.x from ECR
        shell: bash
        env:
          #
          CHART_REPO: holo-indexer
          CHART_VERSION: ${{ env.STG_HOLOGRAPH_INDEXER_HELM_CHART_VERSION }}
          #
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          helm pull oci://$ECR_REGISTRY/$CHART_REPO --version $CHART_VERSION

      # NOTICE: --- OPERATOR ---
      - name: Pull the holograph-operator helm chart version x.x.x from ECR
        shell: bash
        env:
          #
          CHART_REPO: holo-operator
          CHART_VERSION: ${{ env.STG_HOLOGRAPH_OPERATOR_HELM_CHART_VERSION }}
          #
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          helm pull oci://$ECR_REGISTRY/$CHART_REPO --version $CHART_VERSION

      - name: -> V2 -- Deploy INDEXER cli in staging [namespace -> ${{ env.STG_COMMON_NAMESPACE_V2 }}]
        uses: tensor-hq/eksctl-helm-action@main
        env:
          RELEASE_NAME: ${{ env.INDEXER_RELEASE_NAME_V2 }} # notice
          HOLOGRAPH_VERSION: "V2"
          #
          ENABLE_DEBUG: 'true'
          HEALTHCHECK: 'true'
          MODE: 'auto'
          ENABLE_UNSAFE: 'false'
          ENABLE_SYNC: 'true'
          ENABLE_PROCESS_BLOCK_RANGE: 'true' # undefined/true
          UPDATE_BLOCK_HEIGHT: 'api' # api/file/disable
          #
          ENABLE_PROCESS_BLOCK_RANGE_arbitrum: 'true' # undefined/true
          ENABLE_PROCESS_BLOCK_RANGE_optimism: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_binance: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_mantle: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_zora: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_avalanche: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_ethereum: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_polygon: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_base: 'true'
          #
          AVALANCHE_NETWORK: 'fuji'
          POLYGON_NETWORK: 'mumbai'
          BINANCE_NETWORK: 'binanceSmartChainTestnet'
          MANTLE_NETWORK: 'mantleTestnet'
          ETHEREUM_NETWORK: '{ethereumTestnetSepolia}'
          OPTIMISM_NETWORK: '{optimismTestnetSepolia}'
          ARBITRUM_NETWORK: '{arbitrumTestnetSepolia}'
          ZORA_NETWORK: '{zoraTestnetSepolia}'
          BASE_NETWORK: '{baseTestnetSepolia}'
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            helm upgrade --install $RELEASE_NAME \
            holo-indexer-${{ env.STG_HOLOGRAPH_INDEXER_HELM_CHART_VERSION }}.tgz \
            -n ${{ env.STG_COMMON_NAMESPACE_V2 }} \
            \
            --set dummy_deployment_namespace=dev-cli-dummies \
            \
            --set image.repository=${{ env.ECR_REPOSITORY }} \
            --set image.image_tag=${{ env.IMAGE_TAG }} \
            --set config_file_data=${{ env.INDEXER_HOLOGRAPH_CONFIG_FILE_DATA }} \
            --set holo_indexer_password=$DEV_INDEXER_V2_PASSWORD \
            --set HOLO_INDEXER_HOST=$DEV_INDEXER_V2_HOLO_INDEXER_HOST \
            --set OPERATOR_API_KEY=$DEV_INDEXER_V2_OPERATOR_API_KEY \
            --set HOLOGRAPH_ENVIRONMENT=${{ env.HOLOGRAPH_ENVIRONMENT }} \
            --set HOLOGRAPH_ADDRESS=$DEV_INDEXER_V2_HOLOGRAPH_ADDRESS \
            --set HOLOGRAPH_VERSION=${{ env.HOLOGRAPH_VERSION }} \
            --set BLOCK_PROCESSING_VERSION=${{ env.BLOCK_PROCESSING_VERSION }} \
            \
            --set ENABLE_DEBUG=$ENABLE_DEBUG \
            --set ENABLE_SYNC=$ENABLE_SYNC \
            --set HEALTHCHECK=$HEALTHCHECK \
            --set MODE=$MODE \
            \
            --set AVALANCHE_NETWORK="${AVALANCHE_NETWORK}" \
            --set POLYGON_NETWORK="${POLYGON_NETWORK}" \
            --set BINANCE_NETWORK="${BINANCE_NETWORK}" \
            --set MANTLE_NETWORK="${MANTLE_NETWORK}" \
            --set ETHEREUM_NETWORK="${ETHEREUM_NETWORK}" \
            --set OPTIMISM_NETWORK="${OPTIMISM_NETWORK}" \
            --set ARBITRUM_NETWORK="${ARBITRUM_NETWORK}" \
            --set ZORA_NETWORK="${ZORA_NETWORK}" \
            --set BASE_NETWORK="${BASE_NETWORK}" \
            \
            --set ENABLE_UNSAFE="${ENABLE_UNSAFE}" \
            --set UPDATE_BLOCK_HEIGHT=$UPDATE_BLOCK_HEIGHT \
            \
            --set ENABLE_PROCESS_BLOCK_RANGE.arbitrum=$ENABLE_PROCESS_BLOCK_RANGE_arbitrum \
            --set ENABLE_PROCESS_BLOCK_RANGE.binance=$ENABLE_PROCESS_BLOCK_RANGE_binance \
            --set ENABLE_PROCESS_BLOCK_RANGE.avalanche=$ENABLE_PROCESS_BLOCK_RANGE_avalanche \
            --set ENABLE_PROCESS_BLOCK_RANGE.optimism=$ENABLE_PROCESS_BLOCK_RANGE_optimism \
            --set ENABLE_PROCESS_BLOCK_RANGE.ethereum=$ENABLE_PROCESS_BLOCK_RANGE_ethereum \
            --set ENABLE_PROCESS_BLOCK_RANGE.polygon=$ENABLE_PROCESS_BLOCK_RANGE_polygon \
            --set ENABLE_PROCESS_BLOCK_RANGE.mantle=$ENABLE_PROCESS_BLOCK_RANGE_mantle \
            --set ENABLE_PROCESS_BLOCK_RANGE.zora=$ENABLE_PROCESS_BLOCK_RANGE_zora \
            --set ENABLE_PROCESS_BLOCK_RANGE.base=$ENABLE_PROCESS_BLOCK_RANGE_base \
            \
            --set dev_rpc_config_values.avalancheTestnet_rpc_url=$DEV_INDEXER_V2_AVALANCHE_TESTNET_RPC_URL \
            --set dev_rpc_config_values.polygonTestnet_rpc_url=$DEV_INDEXER_V2_POLYGON_TESTNET_RPC_URL \
            --set dev_rpc_config_values.binanceTestnet_rpc_url=$DEV_INDEXER_V2_BINANCE_SMART_CHAIN_TESTNET_RPC_URL \
            --set dev_rpc_config_values.mantleTestnet_rpc_url=$DEV_INDEXER_V2_MANTLE_TESTNET_RPC_URL \
            --set dev_rpc_config_values.ethereumTestnetSepolia_rpc_url=$DEV_INDEXER_V2_ETHEREUM_TESTNET_SEPOLIA_RPC_URL \
            --set dev_rpc_config_values.optimismTestnetSepolia_rpc_url=$DEV_INDEXER_V2_OPTIMISM_TESTNET_SEPOLIA_RPC_URL \
            --set dev_rpc_config_values.arbitrumTestnetSepolia_rpc_url=$DEV_INDEXER_V2_ARBITRUM_TESTNET_SEPOLIA_RPC_URL \
            --set dev_rpc_config_values.zoraTestnetSepolia_rpc_url=$DEV_INDEXER_V2_ZORA_TESTNET_SEPOLIA_RPC_URL \
            --set dev_rpc_config_values.baseTestnetSepolia_rpc_url=$DEV_INDEXER_V2_BASE_TESTNET_SEPOLIA_RPC_URL \
            \
            --set dev_rpc_config_values.private_key=$DEV_INDEXER_V2_PRIVATE_KEY \
            --set dev_rpc_config_values.address=$COMMON_DEV_WALLET_ADDRESS \
            --set dev_rpc_config_values.version="beta3" \
            \
            --set datadog_tags.env=${{ env.CLUSTER_NAME }} \
            --set datadog_tags.service=$RELEASE_NAME \
            --set datadog_tags.version=$RELEASE_NAME-${{ env.STG_HOLOGRAPH_INDEXER_HELM_CHART_VERSION }} \
            \
            --set autoscaling.enabled=false \
            --set replicaCountAvalanche=1 \
            --set replicaCountPolygon=1 \
            --set replicaCountBinance=1 \
            --set replicaCountMantle=1 \
            --set replicaCountEthereum=1 \
            --set replicaCountArbitrum=1 \
            --set replicaCountOptimism=1 \
            --set replicaCountBase=0 \
            --set replicaCountZora=1 \
            \
            --set sqs.SQS_USER_AWS_ACCESS_KEY_ID=$COMMON_AWS_ACCESS_KEY_ID_SQS \
            --set sqs.SQS_USER_AWS_SECRET_ACCESS_KEY=$COMMON_AWS_SECRET_ACCESS_KEY_SQS \
            --set sqs.SQS_ENDPOINT=$DEV_INDEXER_V2_SQS_ENDPOINT \
            --set sqs.SQS_QUEUE_URL=$DEV_INDEXER_V2_SQS_QUEUE_URL \
            --set sqs.AWS_REGION=$COMMON_AWS_REGION

      - name: Pause for 60 seconds
        shell: bash
        run: |
          sleep 60

      - name: -> V2 -- Deploy OPERATOR cli in staging [namespace -> ${{ env.STG_COMMON_NAMESPACE_V2 }}]
        uses: tensor-hq/eksctl-helm-action@main
        env:
          RELEASE_NAME: ${{ env.OPERATOR_RELEASE_NAME_V2 }} # notice
          HOLOGRAPH_VERSION: "V2"
          #
          ENABLE_DEBUG: 'true'
          ENABLE_SYNC: 'true'
          HEALTHCHECK: 'true'
          MODE: 'auto'
          ENABLE_UNSAFE: 'false'
          ENABLE_PROCESS_BLOCK_RANGE: 'true' # undefined/true
          UPDATE_BLOCK_HEIGHT: 'api' # api/file/disable
          #
          ENABLE_PROCESS_BLOCK_RANGE_arbitrum: 'true' # undefined/true
          ENABLE_PROCESS_BLOCK_RANGE_optimism: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_binance: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_mantle: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_zora: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_avalanche: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_ethereum: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_polygon: 'true'
          ENABLE_PROCESS_BLOCK_RANGE_base: 'true'
          #
          AVALANCHE_NETWORK: 'fuji'
          POLYGON_NETWORK: 'mumbai'
          BINANCE_NETWORK: 'binanceSmartChainTestnet'
          MANTLE_NETWORK: 'mantleTestnet'
          ETHEREUM_NETWORK: '{ethereumTestnetSepolia}'
          OPTIMISM_NETWORK: '{optimismTestnetSepolia}'
          ARBITRUM_NETWORK: '{arbitrumTestnetSepolia}'
          ZORA_NETWORK: '{zoraTestnetSepolia}'
          BASE_NETWORK: '{baseTestnetSepolia}'
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            helm upgrade --install $RELEASE_NAME \
            holo-operator-${{ env.STG_HOLOGRAPH_OPERATOR_HELM_CHART_VERSION }}.tgz \
            -n ${{ env.STG_COMMON_NAMESPACE_V2 }} \
            \
            --set dummy_deployment_namespace=dev-cli-dummies \
            \
            --set image.repository=${{ env.ECR_REPOSITORY }} \
            --set image.image_tag=${{ env.IMAGE_TAG }} \
            --set config_file_data=${{ env.OPERATOR_HOLOGRAPH_CONFIG_FILE_DATA }} \
            --set holo_operator_password=$DEV_OPERATOR_V2_PASSWORD \
            --set HOLO_OPERATOR_HOST=$DEV_OPERATOR_V2_HOLO_OPERATOR_HOST \
            --set OPERATOR_API_KEY=$DEV_OPERATOR_V2_OPERATOR_API_KEY \
            --set HOLOGRAPH_ENVIRONMENT=${{ env.HOLOGRAPH_ENVIRONMENT }} \
            --set HOLOGRAPH_ADDRESS=$DEV_OPERATOR_V2_HOLOGRAPH_ADDRESS \
            --set HOLOGRAPH_VERSION=${{ env.HOLOGRAPH_VERSION }} \
            \
            --set ENABLE_DEBUG=$ENABLE_DEBUG \
            --set ENABLE_SYNC=$ENABLE_SYNC \
            --set HEALTHCHECK=$HEALTHCHECK \
            --set MODE=$MODE \
            --set ENABLE_UNSAFE="${ENABLE_UNSAFE}" \
            --set UPDATE_BLOCK_HEIGHT=$UPDATE_BLOCK_HEIGHT \
            \
            --set ENABLE_PROCESS_BLOCK_RANGE.arbitrum=$ENABLE_PROCESS_BLOCK_RANGE_arbitrum \
            --set ENABLE_PROCESS_BLOCK_RANGE.binance=$ENABLE_PROCESS_BLOCK_RANGE_binance \
            --set ENABLE_PROCESS_BLOCK_RANGE.avalanche=$ENABLE_PROCESS_BLOCK_RANGE_avalanche \
            --set ENABLE_PROCESS_BLOCK_RANGE.optimism=$ENABLE_PROCESS_BLOCK_RANGE_optimism \
            --set ENABLE_PROCESS_BLOCK_RANGE.ethereum=$ENABLE_PROCESS_BLOCK_RANGE_ethereum \
            --set ENABLE_PROCESS_BLOCK_RANGE.polygon=$ENABLE_PROCESS_BLOCK_RANGE_polygon \
            --set ENABLE_PROCESS_BLOCK_RANGE.mantle=$ENABLE_PROCESS_BLOCK_RANGE_mantle \
            --set ENABLE_PROCESS_BLOCK_RANGE.zora=$ENABLE_PROCESS_BLOCK_RANGE_zora \
            --set ENABLE_PROCESS_BLOCK_RANGE.base=$ENABLE_PROCESS_BLOCK_RANGE_base \
            \
            --set AVALANCHE_NETWORK="${AVALANCHE_NETWORK}" \
            --set POLYGON_NETWORK="${POLYGON_NETWORK}" \
            --set BINANCE_NETWORK="${BINANCE_NETWORK}" \
            --set MANTLE_NETWORK="${MANTLE_NETWORK}" \
            --set ETHEREUM_NETWORK="${ETHEREUM_NETWORK}" \
            --set OPTIMISM_NETWORK="${OPTIMISM_NETWORK}" \
            --set ARBITRUM_NETWORK="${ARBITRUM_NETWORK}" \
            --set ZORA_NETWORK="${ZORA_NETWORK}" \
            --set BASE_NETWORK="${BASE_NETWORK}" \
            \
            --set dev_rpc_config_values.avalancheTestnet_rpc_url=$DEV_OPERATOR_V2_AVALANCHE_TESTNET_RPC_URL \
            --set dev_rpc_config_values.polygonTestnet_rpc_url=$DEV_OPERATOR_V2_POLYGON_TESTNET_RPC_URL \
            --set dev_rpc_config_values.binanceTestnet_rpc_url=$DEV_OPERATOR_V2_BINANCE_SMART_CHAIN_TESTNET_RPC_URL \
            --set dev_rpc_config_values.mantleTestnet_rpc_url=$DEV_OPERATOR_V2_MANTLE_TESTNET_RPC_URL \
            --set dev_rpc_config_values.ethereumTestnetSepolia_rpc_url=$DEV_OPERATOR_V2_ETHEREUM_TESTNET_SEPOLIA_RPC_URL \
            --set dev_rpc_config_values.optimismTestnetSepolia_rpc_url=$DEV_OPERATOR_V2_OPTIMISM_TESTNET_SEPOLIA_RPC_URL \
            --set dev_rpc_config_values.arbitrumTestnetSepolia_rpc_url=$DEV_OPERATOR_V2_ARBITRUM_TESTNET_SEPOLIA_RPC_URL \
            --set dev_rpc_config_values.zoraTestnetSepolia_rpc_url=$DEV_OPERATOR_V2_ZORA_TESTNET_SEPOLIA_RPC_URL \
            --set dev_rpc_config_values.baseTestnetSepolia_rpc_url=$DEV_OPERATOR_V2_BASE_TESTNET_SEPOLIA_RPC_URL \
            \
            --set dev_rpc_config_values.private_key=$DEV_OPERATOR_V2_PRIVATE_KEY \
            --set dev_rpc_config_values.address=$COMMON_DEV_WALLET_ADDRESS \
            \
            --set autoscaling.enabled=false \
            --set replicaCountAvalanche=1 \
            --set replicaCountPolygon=1 \
            --set replicaCountBinance=1 \
            --set replicaCountMantle=1 \
            --set replicaCountEthereum=1 \
            --set replicaCountArbitrum=1 \
            --set replicaCountOptimism=1 \
            --set replicaCountBase=0 \
            --set replicaCountZora=1 \
            \
            --set datadog_tags.env=${{ env.CLUSTER_NAME }} \
            --set datadog_tags.service=$RELEASE_NAME \
            --set datadog_tags.version=$RELEASE_NAME-${{ env.STG_HOLOGRAPH_OPERATOR_HELM_CHART_VERSION }}

      - name: -> V2 -- Info for the new V2 deployments
        uses: tensor-hq/eksctl-helm-action@main
        env:
          INDEXER_RELEASE_NAME: ${{ env.INDEXER_RELEASE_NAME_V2 }}
          OPERATOR_RELEASE_NAME: ${{ env.OPERATOR_RELEASE_NAME_V2 }}
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            echo "------------------------- Last n Helm releases -------------------------"
            echo "--V2 INDEXER--"
            helm history $INDEXER_RELEASE_NAME  -n ${{ env.STG_COMMON_NAMESPACE_V2 }} --max 3
            echo "--V2 OPERATOR--"
            helm history $OPERATOR_RELEASE_NAME -n ${{ env.STG_COMMON_NAMESPACE_V2 }} --max 3

            echo "------------------------ Newly deployed image [same for all apps] ------------------------"
            echo "$IMAGE_TAG"
