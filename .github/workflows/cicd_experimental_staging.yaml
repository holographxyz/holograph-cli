name: Deploy holoclis to staging[experimental]

permissions:
  id-token: write
  contents: read # This is required for actions/checkout@v2

env:
  AWS_REGION: us-west-2
  IAM_ROLE: arn:aws:iam::177635894328:role/Github_role_to_access_ECR
  ECR_REPOSITORY: holo-cli-dev # notice: the same for all 3 cli apps
  #
  DEV_IMAGE_TAG: dev-87c992a9bccb052ad87a15fba06f5ce97f130f3a #dev-${{ github.sha }}
  #######################################
  STG_HOLO_OPERATOR_HELM_CHART_VERSION: 0.0.31
  #######################################
  CLUSTER_NAME: staging
  #
  AWS_KEY_ID: ${{ secrets.NEWSTAGE_USER_AWS_ACCESS_KEY_ID }}
  AWS_ACCESS_KEY: ${{ secrets.NEWSTAGE_USER_AWS_SECRET_ACCESS_KEY }}
  ALB_CERT_ARN: ${{ secrets.STG_ALB_CERT_ARN_FOR_CXIPCHAIN_XYZ }}
  #
  STG_HOLO_OPERATOR_PASSWORD: ${{ secrets.STG_EXPERIMENTAL_HOLO_OPERATOR_PASSWORD }}
  #
  # set the RPC endpoints config files
  OPERATOR_HOLO_CONFIG_FILE_DATA: exp-config-file
  #
  ABI_ENVIRONMENT: experimental
  #
  STG_DOMAIN: "cxipchain.xyz"
  #
  STG_COMMON_NAMESPACE: experimental # NOTICE <---
  #
  # OPERATOR EXP rpc endpoints
  operator_exp_fuji_rpc_url  : ${{ secrets.OPERATOR_EXP_FUJI_RPC_URL }}
  operator_exp_mumbai_rpc_url: ${{ secrets.OPERATOR_EXP_MUMBAI_RPC_URL }}
  operator_exp_goerli_rpc_url: ${{ secrets.OPERATOR_EXP_GOERLI_RPC_URL }}
  operator_exp_address       : "0xCF7B3892760e7B9fe018306036E7bDf46a4Cb844" #${{ secrets.OPERATOR_EXP_ADDRESS }}

# notice: the trigger
on:
  push:
    branches:
      - feat/new-operators-in-exp #deleteme
#      - 'experimental'
      # Excluded branches
      - '!develop'
      - '!testnet'
      - '!main'
      - '!master'
  pull_request:
    branches:
      - 'experimental'
    types: [closed]

jobs:
  deploy-to-staging:
    name: Deploy-to-staging[experimental]
    runs-on: ubuntu-latest

    steps:
      - name: Use Githubs federated identity with AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

#      - name: Build image
#        run: |
#          docker build --platform linux/amd64 --build-arg AWS_ECR_URL=${{ steps.login-ecr.outputs.registry }} \
#          -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.DEV_IMAGE_TAG }} .
#
#      - name: Push image
#        run: docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.DEV_IMAGE_TAG }}

      - name: Configure AWS creds to access EKS
        # notice: TIP: the deployment user must be in the masters group in the aws-auth config map in the cluster
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_KEY_ID }} #notice: unique for each env
          aws-secret-access-key: ${{ env.AWS_ACCESS_KEY }} #notice: unique for each env
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ns [ ${{ env.STG_COMMON_NAMESPACE }} ]
        uses: tensor-hq/eksctl-helm-action@main
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            kubectl create namespace ${{ env.STG_COMMON_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
      #
      #
      # NOTICE: --- OPERATOR ---
      - name: Pull the holo-operator helm chart version x.x.x from ECR
        shell: bash
        env:
          #
          CHART_REPO: holo-operator
          CHART_VERSION: ${{ env.STG_HOLO_OPERATOR_HELM_CHART_VERSION }}
          #
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          helm pull oci://$ECR_REGISTRY/$CHART_REPO --version $CHART_VERSION

      - name: -> Deploy OPERATOR cli in staging [namespace -> ${{ env.STG_COMMON_NAMESPACE }}]
        uses: tensor-hq/eksctl-helm-action@main
        env:
          RELEASE_NAME: operator-exp #notice
          ENABLE_DEBUG: "true"
          ENABLE_SYNC : "true"
          HEALTHCHECK : "true"
          MODE        : "auto"
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            helm upgrade --install $RELEASE_NAME \
            holo-operator-${{ env.STG_HOLO_OPERATOR_HELM_CHART_VERSION }}.tgz \
            -n ${{ env.STG_COMMON_NAMESPACE }} \
            --set image.repository=${{ env.ECR_REPOSITORY }} \
            --set image.image_tag=${{ env.DEV_IMAGE_TAG }} \
            --set config_file_data=${{ env.OPERATOR_HOLO_CONFIG_FILE_DATA }} \
            --set holo_operator_password=${{ env.STG_HOLO_OPERATOR_PASSWORD }} \
            --set ABI_ENVIRONMENT=${{ env.ABI_ENVIRONMENT }} \
            \
            --set ENABLE_DEBUG=$ENABLE_DEBUG \
            --set ENABLE_SYNC=$ENABLE_SYNC \
            --set HEALTHCHECK=$HEALTHCHECK \
            --set MODE=$MODE \
            \
            --set exp_rpc_config_values.bridge_source="goerli" \
            --set exp_rpc_config_values.bridge_destination="mumbai" \
            --set exp_rpc_config_values.address=$operator_exp_address \
            \
            --set exp_rpc_config_values.fuji_rpc_url=${{ env.operator_exp_fuji_rpc_url }} \
            --set exp_rpc_config_values.mumbai_rpc_url=${{ env.operator_exp_mumbai_rpc_url }} \
            --set exp_rpc_config_values.rinkeby_rpc_url=${{ env.operator_exp_rinkeby_rpc_url }} \
            --set exp_rpc_config_values.goerli_rpc_url=${{ env.operator_exp_goerli_rpc_url }} \
            \
            --set datadog_tags.env=${{ env.CLUSTER_NAME }} \
            --set datadog_tags.version=chart-${{ env.STG_HOLO_OPERATOR_HELM_CHART_VERSION }} \
            \
            --values .github/values_for_stg_alb_ingress.yaml \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/certificate-arn"='${{ env.ALB_CERT_ARN }}' \
            --set ingress.ingress_name=ing-$RELEASE_NAME-health \
            --set ingress.host=$RELEASE_NAME-health.${{ env.STG_DOMAIN }} \
            --set ingress.target_svc_name=$RELEASE_NAME-holo-operator \
            --set ingress.blue_green_deployment=false

      - name: -> Info for the new deployments
        uses: tensor-hq/eksctl-helm-action@main
        env:
          OPERATOR_RELEASE_NAME: "operator-exp"
          LB_URL: 'https://staging-alb-1490082055.us-west-2.elb.amazonaws.com'
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            echo "------------------------- Last 5 Helm releases -------------------------"
            echo "--OPERATOR--"
            helm history $OPERATOR_RELEASE_NAME  -n ${{ env.STG_COMMON_NAMESPACE }} --max 3

            echo "------------------------ Newly deployed image [same for all apps] ------------------------"
            echo "$DEV_IMAGE_TAG"

            echo "------------------------ Healthchecks ------------------------"
            sleep 55

            ENDPOINT=$OPERATOR_RELEASE_NAME-health.${{ env.STG_DOMAIN }}
            echo "curl -k -H \"Host: $ENDPOINT\" $LB_URL/healthcheck"
            curl -k -H "Host: $ENDPOINT" $LB_URL/healthcheck | jq '.status'
