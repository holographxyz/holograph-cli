name: Deploy holoclis to prod[mainnet]

permissions:
  id-token: write
  contents: read # This is required for actions/checkout@v2

env:
  AWS_REGION: us-west-2
  IAM_ROLE: arn:aws:iam::177635894328:role/Github_role_to_access_ECR
  ECR_REPOSITORY: holo-cli # notice: the same for all cli apps
  #
  MAINNET_IMAGE_TAG: mainnet-${{ github.sha }}
  #
  CLUSTER_NAME: prod0
  #
  AWS_KEY_ID: ${{ secrets.PROD0_CICD_USER_AWS_ACCESS_KEY_ID }}
  AWS_ACCESS_KEY: ${{ secrets.PROD0_CICD_USER_AWS_SECRET_ACCESS_KEY }}
  ALB_CERT_ARN: ${{ secrets.PROD_ALB_CERT_ARN_FOR_HOLOGRAPH_XYZ }} # TIP: the 2 CERTs are separated with \, in Github secret
  #
  MAINNET_HOLO_INDEXER_OPERATOR_API_KEY: ${{ secrets.HOLO_INDEXER_MAINNET_OPERATOR_API_KEY }}
  #
  MAINNET_HOLO_INDEXER_HOST: 'http://rhea-holo-api.mainnet.svc.cluster.local:443' # Notice <-- the release from API
  #
  MAINNET_HOLO_INDEXER_PASSWORD: ${{ secrets.MAINNET_HOLO_INDEXER_PASSWORD }}
  MAINNET_HOLO_OPERATOR_PASSWORD: ${{ secrets.MAINNET_HOLO_OPERATOR_PASSWORD }}
  #
  # set the RPC endpoints config files
  INDEXER_HOLO_CONFIG_FILE_DATA: mainnet-config-file
  OPERATOR_HOLO_CONFIG_FILE_DATA: mainnet-config-file
  #
  HOLOGRAPH_ENVIRONMENT: mainnet
  #
  MAINNET_DOMAIN: 'holograph.xyz'
  #
  MAINNET_COMMON_NAMESPACE: mainnet # NOTICE <---
  #
  #######################################
  MAINNET_HOLO_INDEXER_HELM_CHART_VERSION: 0.0.68
  INDEXER_RELEASE_NAME : rhea-indexer-mainnet  # format -> [release_name]-indexer-[env]
  #
  MAINNET_HOLO_OPERATOR_HELM_CHART_VERSION: 0.0.54
  OPERATOR_RELEASE_NAME: rhea-operator-mainnet # format -> [release_name]-operator-[env]
  #######################################
  #
  ### INDEXER MAINNET rpc endpoints
  indexer_mainnet_avalanche_rpc_url: ${{ secrets.INDEXER_MAINNET_AVALANCHE_RPC_URL }}
  indexer_mainnet_polygon_rpc_url: ${{ secrets.INDEXER_MAINNET_POLYGON_RPC_URL }}
  indexer_mainnet_ethereum_rpc_url: ${{ secrets.INDEXER_MAINNET_ETHEREUM_RPC_URL }}
  #
  indexer_mainnet_private_key: ${{ secrets.INDEXER_MAINNET_PRIVATE_KEY }}
  indexer_mainnet_address: ${{ secrets.INDEXER_MAINNET_ADDRESS }}
  ### OPERATOR MAINNET rpc endpoints
  operator_mainnet_avalanche_rpc_url: ${{ secrets.OPERATOR_MAINNET_AVALANCHE_RPC_URL }}
  operator_mainnet_polygon_rpc_url: ${{ secrets.OPERATOR_MAINNET_POLYGON_RPC_URL }}
  operator_mainnet_ethereum_rpc_url: ${{ secrets.OPERATOR_MAINNET_ETHEREUM_RPC_URL }}
  #
  operator_mainnet_private_key: ${{ secrets.OPERATOR_MAINNET_PRIVATE_KEY }}
  operator_mainnet_address: ${{ secrets.OPERATOR_MAINNET_ADDRESS }}

## notice: the trigger
#on:
#  push:
#    branches:
#      - 'something'
#      # Excluded branches
#      - '!develop'
#      - '!main'
#      - '!master'
# notice: the trigger
on:
  pull_request:
    branches:
      - 'mainnet'
    types: [closed]

jobs:
  deploy-to-prod-mainnet:
    if: github.event.pull_request.merged == true # so no workflow runs when some PR is just closed without being merged
    name: Deploy-to-prod[mainnet]
    runs-on: ubuntu-latest

    steps:
      - name: Use Githubs federated identity with AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build image
        run: |
          docker build --platform linux/amd64 --build-arg AWS_ECR_URL=${{ steps.login-ecr.outputs.registry }} \
          -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.MAINNET_IMAGE_TAG }} .

      - name: Push image
        run: docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.MAINNET_IMAGE_TAG }}

      - name: Configure AWS creds to access EKS
        # TIP: the deployment user must be in the masters group in the aws-auth config map in the cluster
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_KEY_ID }} #notice: unique for each env
          aws-secret-access-key: ${{ env.AWS_ACCESS_KEY }} #notice: unique for each env
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ns [${{ env.MAINNET_COMMON_NAMESPACE }}]
        uses: tensor-hq/eksctl-helm-action@main
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            kubectl create namespace ${{ env.MAINNET_COMMON_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
      #
      #
      # NOTICE: --- INDEXER ---
      - name: Pull the holo-indexer helm chart version x.x.x from ECR
        shell: bash
        env:
          #
          CHART_REPO: holo-indexer
          CHART_VERSION: ${{ env.MAINNET_HOLO_INDEXER_HELM_CHART_VERSION }}
          #
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          helm pull oci://$ECR_REGISTRY/$CHART_REPO --version $CHART_VERSION
      ######
      - name: -> Deploy INDEXER cli in MAINNET [namespace -> ${{ env.MAINNET_COMMON_NAMESPACE }}]
        uses: tensor-hq/eksctl-helm-action@main
        env:
          RELEASE_NAME: ${{ env.INDEXER_RELEASE_NAME }} # notice
          #
          ENABLE_DEBUG: 'true'
          HEALTHCHECK: 'true'
          MODE: 'auto'
          ENABLE_UNSAFE: 'true'
          NETWORK: 'avax matic eth'
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            helm upgrade --install $RELEASE_NAME \
            holo-indexer-${{ env.MAINNET_HOLO_INDEXER_HELM_CHART_VERSION }}.tgz \
            -n ${{ env.MAINNET_COMMON_NAMESPACE }} \
            \
            --set image.repository=${{ env.ECR_REPOSITORY }} \
            --set image.image_tag=${{ env.MAINNET_IMAGE_TAG }} \
            --set config_file_data=${{ env.INDEXER_HOLO_CONFIG_FILE_DATA }} \
            --set holo_indexer_password=${{ env.MAINNET_HOLO_INDEXER_PASSWORD }} \
            --set HOLO_INDEXER_HOST=${{ env.MAINNET_HOLO_INDEXER_HOST }} \
            --set OPERATOR_API_KEY=${{ env.MAINNET_HOLO_INDEXER_OPERATOR_API_KEY }} \
            --set HOLOGRAPH_ENVIRONMENT=${{ env.HOLOGRAPH_ENVIRONMENT }} \
            \
            --set ENABLE_DEBUG=$ENABLE_DEBUG \
            --set HEALTHCHECK=$HEALTHCHECK \
            --set MODE=$MODE \
            --set NETWORK="${NETWORK}" \
            --set ENABLE_UNSAFE="${ENABLE_UNSAFE}" \
            \
            --set mainnet_rpc_config_values.avalanche_rpc_url=${{ env.indexer_mainnet_avalanche_rpc_url }} \
            --set mainnet_rpc_config_values.polygon_rpc_url=${{ env.indexer_mainnet_polygon_rpc_url }} \
            --set mainnet_rpc_config_values.ethereum_rpc_url=${{ env.indexer_mainnet_ethereum_rpc_url }} \
            \
            --set mainnet_rpc_config_values.private_key=${{ env.indexer_mainnet_private_key }} \
            --set mainnet_rpc_config_values.address=${{ env.indexer_mainnet_address }} \
            --set mainnet_rpc_config_values.version="beta3" \
            \
            --set datadog_tags.env=${{ env.CLUSTER_NAME }} \
            --set datadog_tags.service=$RELEASE_NAME-holo-indexer \
            --set datadog_tags.version=chart-${{ env.MAINNET_HOLO_INDEXER_HELM_CHART_VERSION }} \
            \
            --set autoscaling.minReplicas=2 \
            --set autoscaling.maxReplicas=2 \
            \
            --set LivenessProbeCommand="if [ \$(curl localhost:6000/healthcheck | jq -r '.providerStatus.polygon') != CONNECTED ] ;then exit 1 ;fi && if [ \$(curl localhost:6000/healthcheck | jq -r '.providerStatus.avalanche') != CONNECTED ] ;then exit 1 ;fi" \
            \
            --values .github/values_for_prod_alb_ingress.yaml \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/certificate-arn"='${{ env.ALB_CERT_ARN }}' \
            --set ingress.ingress_name=ing-$RELEASE_NAME-health \
            --set ingress.host=$RELEASE_NAME-health.${{ env.MAINNET_DOMAIN }} \
            --set ingress.target_svc_name=$RELEASE_NAME-holo-indexer \
            --set ingress.blue_green_deployment=false
      #
      #
      # NOTICE: --- OPERATOR ---
      - name: Pull the holograph-operator helm chart version x.x.x from ECR
        shell: bash
        env:
          #
          CHART_REPO: holo-operator
          CHART_VERSION: ${{ env.MAINNET_HOLO_OPERATOR_HELM_CHART_VERSION }}
          #
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          helm pull oci://$ECR_REGISTRY/$CHART_REPO --version $CHART_VERSION
      ######
      - name: -> Deploy OPERATOR cli in MAINNET [namespace -> ${{ env.MAINNET_COMMON_NAMESPACE }}]
        uses: tensor-hq/eksctl-helm-action@main
        env:
          RELEASE_NAME: ${{ env.OPERATOR_RELEASE_NAME }} # notice
          #
          ENABLE_DEBUG: 'true'
          ENABLE_SYNC: 'true'
          HEALTHCHECK: 'true'
          MODE: 'auto'
          ENABLE_UNSAFE: 'true'
          AVALANCHE_NETWORK: "avax"
          POLYGON_NETWORK  : "matic"
          ETHEREUM_NETWORK : "eth"
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            helm upgrade --install $RELEASE_NAME \
            holo-operator-${{ env.MAINNET_HOLO_OPERATOR_HELM_CHART_VERSION }}.tgz \
            -n ${{ env.MAINNET_COMMON_NAMESPACE }} \
            \
            --set image.repository=${{ env.ECR_REPOSITORY }} \
            --set image.image_tag=${{ env.MAINNET_IMAGE_TAG }} \
            --set config_file_data=${{ env.OPERATOR_HOLO_CONFIG_FILE_DATA }} \
            --set holo_operator_password=${{ env.MAINNET_HOLO_OPERATOR_PASSWORD }} \
            --set HOLOGRAPH_ENVIRONMENT=${{ env.HOLOGRAPH_ENVIRONMENT }} \
            \
            --set ENABLE_DEBUG=$ENABLE_DEBUG \
            --set ENABLE_SYNC=$ENABLE_SYNC \
            --set HEALTHCHECK=$HEALTHCHECK \
            --set MODE=$MODE \
            --set ENABLE_UNSAFE="${ENABLE_UNSAFE}" \
            \
            --set AVALANCHE_NETWORK=$AVALANCHE_NETWORK \
            --set POLYGON_NETWORK=$POLYGON_NETWORK \
            --set ETHEREUM_NETWORK=$ETHEREUM_NETWORK \
            \
            --set mainnet_rpc_config_values.avalanche_rpc_url=${{ env.operator_mainnet_avalanche_rpc_url }} \
            --set mainnet_rpc_config_values.polygon_rpc_url=${{ env.operator_mainnet_polygon_rpc_url }} \
            --set mainnet_rpc_config_values.ethereum_rpc_url=${{ env.operator_mainnet_ethereum_rpc_url }} \
            \
            --set mainnet_rpc_config_values.private_key=${{ env.operator_mainnet_private_key }} \
            --set mainnet_rpc_config_values.address=${{ env.operator_mainnet_address }} \
            \
            --set datadog_tags.env=${{ env.CLUSTER_NAME }} \
            --set datadog_tags.service=$RELEASE_NAME \
            --set datadog_tags.version=chart-${{ env.MAINNET_HOLO_OPERATOR_HELM_CHART_VERSION }} \
            \
            --values .github/values_for_prod_alb_ingress.yaml \
            --set ingress.annotations."alb\.ingress\.kubernetes\.io/certificate-arn"='${{ env.ALB_CERT_ARN }}' \
            --set ingress.ingress_name=ing-$RELEASE_NAME-health \
            --set ingress.host=$RELEASE_NAME-health.${{ env.MAINNET_DOMAIN }} \
            --set ingress.target_svc_name=$RELEASE_NAME-holo-operator \
            --set ingress.blue_green_deployment=false

      - name: -> Info for the new deployments
        uses: tensor-hq/eksctl-helm-action@main
        env:
          INDEXER_RELEASE_NAME : ${{ env.INDEXER_RELEASE_NAME }}
          OPERATOR_RELEASE_NAME: ${{ env.OPERATOR_RELEASE_NAME }}
          LB_URL: 'https://prod0-alb-1736382478.us-west-2.elb.amazonaws.com'
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            echo "------------------------- Last n Helm releases -------------------------"
            echo "--INDEXER--"
            helm history $INDEXER_RELEASE_NAME  -n ${{ env.MAINNET_COMMON_NAMESPACE }} --max 3
            echo "--OPERATOR--"
            helm history $OPERATOR_RELEASE_NAME -n ${{ env.MAINNET_COMMON_NAMESPACE }} --max 3

            echo "------------------------ Newly deployed image [same for all clis] ------------------------ "
            echo "$MAINNET_IMAGE_TAG"

            echo "------------------------ Healthchecks ------------------------"
            sleep 55

            ENDPOINT=$INDEXER_RELEASE_NAME-health.${{ env.MAINNET_DOMAIN }}
            echo "curl -k -H \"Host: $ENDPOINT\" $LB_URL/healthcheck"
            curl -k -H "Host: $ENDPOINT" $LB_URL/healthcheck | jq '.status'

            ENDPOINT=$OPERATOR_RELEASE_NAME-health.${{ env.MAINNET_DOMAIN }}
            echo "curl -k -H \"Host: $ENDPOINT\" $LB_URL/healthcheck"
            curl -k -H "Host: $ENDPOINT" $LB_URL/healthcheck | jq '.status'
