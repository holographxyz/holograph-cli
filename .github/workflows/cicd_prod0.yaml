name: Deploy holoclis to prod

permissions:
  id-token: write
  contents: read   # This is required for actions/checkout@v2

env:
  AWS_REGION    : us-west-2
  IAM_ROLE      : arn:aws:iam::177635894328:role/Github_role_to_access_ECR
  ECR_REPOSITORY: holo-cli # notice: the same for all 3 cli apps
  #
  PROD_IMAGE_TAG : ...... # main-${{ github.sha }} #NOTICE
  #
  PROD_HOLO_INDEXER_HELM_CHART_VERSION   : 0.0.6 # NOTICE
  PROD_HOLO_OPERATOR_HELM_CHART_VERSION  : 0.0.5 # NOTICE
  PROD_HOLO_PROPAGATOR_HELM_CHART_VERSION: 0.0.5 # NOTICE
  #
  CLUSTER_NAME   : prod0 # NOTICE
  AWS_KEY_ID     : ${{ secrets.PROD0_CICD_USER_AWS_ACCESS_KEY_ID }}
  AWS_ACCESS_KEY : ${{ secrets.PROD0_CICD_USER_AWS_SECRET_ACCESS_KEY }}
  #
  # TODO -> set the password as github secret var
  PROD_HOLO_INDEXER_PASSWORD   : asdf #TODO ${{ secrets.HOLO_INDEXER_PASSWORD }}
  PROD_HOLO_OPERATOR_PASSWORD  : asdf #TODO ${{ secrets.HOLO_OPERATOR_PASSWORD }}
  PROD_HOLO_PROPAGATOR_PASSWORD: asdf #TODO ${{ secrets.HOLO_PROPAGATOR_PASSWORD }}
  #
  PROD_COMMON_NAMESPACE: holocli

on: # deleteme
  push: # deleteme
    branches:
      - 'sfdgsffgs' # deleteme
      #
      - '!main'     # EXCLUDES this branch
      - '!master'   # EXCLUDES this branch
#on: # notice: TRIGGERs ONLY FOR THE main BRANCH
#  pull_request:
#    branches:
#      - main
#    types: [closed]

jobs:
  deploy-to-prod0:
    name: Deploy to prod0
    runs-on: ubuntu-latest

    steps:
      - name: Use Githubs federated identity with AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.IAM_ROLE }}
          aws-region    : ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Checkout code
        uses: actions/checkout@v2

#      - name: Build and push image to ECR
#        env:
#          ECR_REGISTRY  : ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$PROD_IMAGE_TAG .
#          docker push     $ECR_REGISTRY/$ECR_REPOSITORY:$PROD_IMAGE_TAG

      - name: Configure AWS creds to access EKS
        # notice: TIP: the deployment user must be in the masters group in the aws-auth config map in the cluster
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id    : ${{ env.AWS_KEY_ID }}     #notice: unique for each env
          aws-secret-access-key: ${{ env.AWS_ACCESS_KEY }} #notice: unique for each env
          aws-region           : ${{ env.AWS_REGION }}

      - name: Create holocli prod ns
        uses: tensor-hq/eksctl-helm-action@main
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            kubectl create namespace ${{ env.PROD_COMMON_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
      #
      #
      # NOTICE: --- INDEXER ---
      - name: Pull the holo-indexer helm chart version x.x.x from ECR
        shell: bash
        env:
          #
          CHART_REPO   : holo-indexer
          CHART_VERSION: ${{ env.PROD_HOLO_INDEXER_HELM_CHART_VERSION }}
          #
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run : |
          helm pull oci://$ECR_REGISTRY/$CHART_REPO --version $CHART_VERSION

      - name: -> Deploy INDEXER cli in prod [namespace -> ${{ steps.PROD_COMMON_NAMESPACE }}]
        uses: tensor-hq/eksctl-helm-action@main
        env:
          RELEASE_NAME: indexer
          # TODO -> HOLO_INDEXER_HOST <----- replace with k8s service endpoint [angello,alex should make code changes]
          HOLO_INDEXER_HOST: https://develop.cxipchain.xyz # TODO https://api.holograph.xyz
          #TODO - create new gh secret. should be different from staging????
          PROD_HOLO_INDEXER_OPERATOR_API_KEY: ${{ secrets.HOLO_INDEXER_OPERATOR_API_KEY }}
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            helm upgrade --install $RELEASE_NAME \
            holo-indexer-${{ env.PROD_HOLO_INDEXER_HELM_CHART_VERSION }}.tgz \
            -n ${{ env.PROD_COMMON_NAMESPACE }} \
            --set image.repository=${{ env.ECR_REPOSITORY }} \
            --set image.image_tag=${{ env.PROD_IMAGE_TAG }} \
            --set ConfigFileName=${{ env.PROD_HOLO_CONFIG_FILE }} \
            --set holo_indexer_password=${{ env.PROD_HOLO_INDEXER_PASSWORD }} \
            --set HOLO_INDEXER_HOST=$HOLO_INDEXER_HOST \
            --set OPERATOR_API_KEY=${{ env.PROD_HOLO_INDEXER_OPERATOR_API_KEY }} \
            --set datadog_tags.env=${{ env.CLUSTER_NAME }} \
            --set datadog_tags.service=$RELEASE_NAME-holo-indexer \
            --set datadog_tags.version=chart-${{ env.PROD_HOLO_INDEXER_HELM_CHART_VERSION }}
      #
      #
      # NOTICE: --- OPERATOR ---
      - name: Pull the holo-operator helm chart version x.x.x from ECR
        shell: bash
        env:
          #
          CHART_REPO   : holo-operator
          CHART_VERSION: ${{ env.PROD_HOLO_OPERATOR_HELM_CHART_VERSION }}
          #
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run : |
          helm pull oci://$ECR_REGISTRY/$CHART_REPO --version $CHART_VERSION

      - name: -> Deploy OPERATOR cli in prod [namespace -> ${{ env.PROD_COMMON_NAMESPACE }}]
        uses: tensor-hq/eksctl-helm-action@main
        env:
          RELEASE_NAME: operator
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            helm upgrade --install $RELEASE_NAME \
            holo-operator-${{ env.PROD_HOLO_OPERATOR_HELM_CHART_VERSION }}.tgz \
            -n ${{ env.PROD_COMMON_NAMESPACE }} \
            --set image.repository=${{ env.ECR_REPOSITORY }} \
            --set image.image_tag=${{ env.PROD_IMAGE_TAG }} \
            --set ConfigFileName=${{ env.PROD_HOLO_CONFIG_FILE }} \
            --set holo_operator_password=${{ env.PROD_HOLO_OPERATOR_PASSWORD }} \
            --set datadog_tags.env=${{ env.CLUSTER_NAME }} \
            --set datadog_tags.service=$RELEASE_NAME-holo-operator \
            --set datadog_tags.version=chart-${{ env.PROD_HOLO_OPERATOR_HELM_CHART_VERSION }}
      #
      #
      # NOTICE: --- PROPAGATOR ---
      - name: Pull the holo-propagator helm chart version x.x.x from ECR
        shell: bash
        env:
          #
          CHART_REPO   : holo-propagator
          CHART_VERSION: ${{ env.PROD_HOLO_PROPAGATOR_HELM_CHART_VERSION }}
          #
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run : |
          helm pull oci://$ECR_REGISTRY/$CHART_REPO --version $CHART_VERSION

      - name: -> Deploy PROPAGATOR cli in prod [namespace -> ${{ env.PROD_COMMON_NAMESPACE }}]
        uses: tensor-hq/eksctl-helm-action@main
        env:
          RELEASE_NAME: propagator
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            helm upgrade --install $RELEASE_NAME \
            holo-propagator-${{ env.PROD_HOLO_PROPAGATOR_HELM_CHART_VERSION }}.tgz \
            -n ${{ env.PROD_COMMON_NAMESPACE }} \
            --set image.repository=${{ env.ECR_REPOSITORY }} \
            --set image.image_tag=${{ env.PROD_IMAGE_TAG }} \
            --set ConfigFileName=${{ env.PROD_HOLO_CONFIG_FILE }} \
            --set holo_propagator_password=${{ env.PROD_HOLO_PROPAGATOR_PASSWORD }} \
            --set datadog_tags.env=${{ env.CLUSTER_NAME }} \
            --set datadog_tags.service=$RELEASE_NAME-holo-propagator \
            --set datadog_tags.version=chart-${{ env.PROD_HOLO_PROPAGATOR_HELM_CHART_VERSION }}

      - name: -> Info for the new deployments
        uses: tensor-hq/eksctl-helm-action@main
        env:
          INDEXER_RELEASE_NAME   : indexer
          OPERATOR_RELEASE_NAME  : operator
          PROPAGATOR_RELEASE_NAME: propagator
        with:
          eks_cluster: ${{ env.CLUSTER_NAME }}
          command: |-
            echo "------------------------- Last 5 Helm releases -------------------------"
            echo "--INDEXER--"
            helm history $INDEXER_RELEASE_NAME    -n ${{ env.PROD_COMMON_NAMESPACE }} --max 3
            echo "--OPERATOR--"
            helm history $OPERATOR_RELEASE_NAME   -n ${{ env.PROD_COMMON_NAMESPACE }} --max 3
            echo "--PROPAGATOR--"
            helm history $PROPAGATOR_RELEASE_NAME -n ${{ env.PROD_COMMON_NAMESPACE }} --max 3

            echo "------------------------ Newly deployed image [same for all 3 apps] ------------------------ "
            echo "$PROD_IMAGE_TAG"
